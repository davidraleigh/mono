// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/route_guide/v1/route_guide.proto

#include "proto/route_guide/v1/route_guide.pb.h"
#include "proto/route_guide/v1/route_guide.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace route_guide {
namespace v1 {

static const char* RouteGuideService_method_names[] = {
  "/route_guide.v1.RouteGuideService/GetFeature",
  "/route_guide.v1.RouteGuideService/ListFeatures",
  "/route_guide.v1.RouteGuideService/RecordRoute",
  "/route_guide.v1.RouteGuideService/RouteChat",
};

std::unique_ptr< RouteGuideService::Stub> RouteGuideService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RouteGuideService::Stub> stub(new RouteGuideService::Stub(channel, options));
  return stub;
}

RouteGuideService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetFeature_(RouteGuideService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFeatures_(RouteGuideService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RecordRoute_(RouteGuideService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_RouteChat_(RouteGuideService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status RouteGuideService::Stub::GetFeature(::grpc::ClientContext* context, const ::route_guide::v1::GetFeatureRequest& request, ::route_guide::v1::GetFeatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::route_guide::v1::GetFeatureRequest, ::route_guide::v1::GetFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFeature_, context, request, response);
}

void RouteGuideService::Stub::async::GetFeature(::grpc::ClientContext* context, const ::route_guide::v1::GetFeatureRequest* request, ::route_guide::v1::GetFeatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::route_guide::v1::GetFeatureRequest, ::route_guide::v1::GetFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFeature_, context, request, response, std::move(f));
}

void RouteGuideService::Stub::async::GetFeature(::grpc::ClientContext* context, const ::route_guide::v1::GetFeatureRequest* request, ::route_guide::v1::GetFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::route_guide::v1::GetFeatureResponse>* RouteGuideService::Stub::PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::route_guide::v1::GetFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::route_guide::v1::GetFeatureResponse, ::route_guide::v1::GetFeatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFeature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::route_guide::v1::GetFeatureResponse>* RouteGuideService::Stub::AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::route_guide::v1::GetFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFeatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::route_guide::v1::ListFeaturesResponse>* RouteGuideService::Stub::ListFeaturesRaw(::grpc::ClientContext* context, const ::route_guide::v1::ListFeaturesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::route_guide::v1::ListFeaturesResponse>::Create(channel_.get(), rpcmethod_ListFeatures_, context, request);
}

void RouteGuideService::Stub::async::ListFeatures(::grpc::ClientContext* context, const ::route_guide::v1::ListFeaturesRequest* request, ::grpc::ClientReadReactor< ::route_guide::v1::ListFeaturesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::route_guide::v1::ListFeaturesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListFeatures_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::route_guide::v1::ListFeaturesResponse>* RouteGuideService::Stub::AsyncListFeaturesRaw(::grpc::ClientContext* context, const ::route_guide::v1::ListFeaturesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::route_guide::v1::ListFeaturesResponse>::Create(channel_.get(), cq, rpcmethod_ListFeatures_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::route_guide::v1::ListFeaturesResponse>* RouteGuideService::Stub::PrepareAsyncListFeaturesRaw(::grpc::ClientContext* context, const ::route_guide::v1::ListFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::route_guide::v1::ListFeaturesResponse>::Create(channel_.get(), cq, rpcmethod_ListFeatures_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::route_guide::v1::RecordRouteRequest>* RouteGuideService::Stub::RecordRouteRaw(::grpc::ClientContext* context, ::route_guide::v1::RecordRouteResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::route_guide::v1::RecordRouteRequest>::Create(channel_.get(), rpcmethod_RecordRoute_, context, response);
}

void RouteGuideService::Stub::async::RecordRoute(::grpc::ClientContext* context, ::route_guide::v1::RecordRouteResponse* response, ::grpc::ClientWriteReactor< ::route_guide::v1::RecordRouteRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::route_guide::v1::RecordRouteRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_RecordRoute_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::route_guide::v1::RecordRouteRequest>* RouteGuideService::Stub::AsyncRecordRouteRaw(::grpc::ClientContext* context, ::route_guide::v1::RecordRouteResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::route_guide::v1::RecordRouteRequest>::Create(channel_.get(), cq, rpcmethod_RecordRoute_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::route_guide::v1::RecordRouteRequest>* RouteGuideService::Stub::PrepareAsyncRecordRouteRaw(::grpc::ClientContext* context, ::route_guide::v1::RecordRouteResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::route_guide::v1::RecordRouteRequest>::Create(channel_.get(), cq, rpcmethod_RecordRoute_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::route_guide::v1::RouteChatRequest, ::route_guide::v1::RouteChatResponse>* RouteGuideService::Stub::RouteChatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::route_guide::v1::RouteChatRequest, ::route_guide::v1::RouteChatResponse>::Create(channel_.get(), rpcmethod_RouteChat_, context);
}

void RouteGuideService::Stub::async::RouteChat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::route_guide::v1::RouteChatRequest,::route_guide::v1::RouteChatResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::route_guide::v1::RouteChatRequest,::route_guide::v1::RouteChatResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_RouteChat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::route_guide::v1::RouteChatRequest, ::route_guide::v1::RouteChatResponse>* RouteGuideService::Stub::AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::route_guide::v1::RouteChatRequest, ::route_guide::v1::RouteChatResponse>::Create(channel_.get(), cq, rpcmethod_RouteChat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::route_guide::v1::RouteChatRequest, ::route_guide::v1::RouteChatResponse>* RouteGuideService::Stub::PrepareAsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::route_guide::v1::RouteChatRequest, ::route_guide::v1::RouteChatResponse>::Create(channel_.get(), cq, rpcmethod_RouteChat_, context, false, nullptr);
}

RouteGuideService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteGuideService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RouteGuideService::Service, ::route_guide::v1::GetFeatureRequest, ::route_guide::v1::GetFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RouteGuideService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::route_guide::v1::GetFeatureRequest* req,
             ::route_guide::v1::GetFeatureResponse* resp) {
               return service->GetFeature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteGuideService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RouteGuideService::Service, ::route_guide::v1::ListFeaturesRequest, ::route_guide::v1::ListFeaturesResponse>(
          [](RouteGuideService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::route_guide::v1::ListFeaturesRequest* req,
             ::grpc::ServerWriter<::route_guide::v1::ListFeaturesResponse>* writer) {
               return service->ListFeatures(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteGuideService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RouteGuideService::Service, ::route_guide::v1::RecordRouteRequest, ::route_guide::v1::RecordRouteResponse>(
          [](RouteGuideService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::route_guide::v1::RecordRouteRequest>* reader,
             ::route_guide::v1::RecordRouteResponse* resp) {
               return service->RecordRoute(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteGuideService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RouteGuideService::Service, ::route_guide::v1::RouteChatRequest, ::route_guide::v1::RouteChatResponse>(
          [](RouteGuideService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::route_guide::v1::RouteChatResponse,
             ::route_guide::v1::RouteChatRequest>* stream) {
               return service->RouteChat(ctx, stream);
             }, this)));
}

RouteGuideService::Service::~Service() {
}

::grpc::Status RouteGuideService::Service::GetFeature(::grpc::ServerContext* context, const ::route_guide::v1::GetFeatureRequest* request, ::route_guide::v1::GetFeatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuideService::Service::ListFeatures(::grpc::ServerContext* context, const ::route_guide::v1::ListFeaturesRequest* request, ::grpc::ServerWriter< ::route_guide::v1::ListFeaturesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuideService::Service::RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::route_guide::v1::RecordRouteRequest>* reader, ::route_guide::v1::RecordRouteResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuideService::Service::RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::route_guide::v1::RouteChatResponse, ::route_guide::v1::RouteChatRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace route_guide
}  // namespace v1

