# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.route_guide.v1 import route_guide_pb2 as proto_dot_route__guide_dot_v1_dot_route__guide__pb2


class RouteGuideServiceStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFeature = channel.unary_unary(
                '/route_guide.v1.RouteGuideService/GetFeature',
                request_serializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.GetFeatureRequest.SerializeToString,
                response_deserializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.GetFeatureResponse.FromString,
                )
        self.ListFeatures = channel.unary_stream(
                '/route_guide.v1.RouteGuideService/ListFeatures',
                request_serializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.ListFeaturesRequest.SerializeToString,
                response_deserializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.ListFeaturesResponse.FromString,
                )
        self.RecordRoute = channel.stream_unary(
                '/route_guide.v1.RouteGuideService/RecordRoute',
                request_serializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RecordRouteRequest.SerializeToString,
                response_deserializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RecordRouteResponse.FromString,
                )
        self.RouteChat = channel.stream_stream(
                '/route_guide.v1.RouteGuideService/RouteChat',
                request_serializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RouteChatRequest.SerializeToString,
                response_deserializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RouteChatResponse.FromString,
                )


class RouteGuideServiceServicer(object):
    """Interface exported by the server.
    """

    def GetFeature(self, request, context):
        """A simple RPC.

        Obtains the feature at a given position.

        A feature with an empty name is returned if there's no feature at the given
        position.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFeatures(self, request, context):
        """A server-to-client streaming RPC.

        Obtains the Features available within the given Rectangle.  Results are
        streamed rather than returned at once (e.g. in a response message with a
        repeated field), as the rectangle may cover a large area and contain a
        huge number of features.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordRoute(self, request_iterator, context):
        """A client-to-server streaming RPC.

        Accepts a stream of Points on a route being traversed, returning a
        RouteSummary when traversal is completed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RouteChat(self, request_iterator, context):
        """A Bidirectional streaming RPC.

        Accepts a stream of RouteNotes sent while a route is being traversed,
        while receiving other RouteNotes (e.g. from other users).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouteGuideServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeature,
                    request_deserializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.GetFeatureRequest.FromString,
                    response_serializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.GetFeatureResponse.SerializeToString,
            ),
            'ListFeatures': grpc.unary_stream_rpc_method_handler(
                    servicer.ListFeatures,
                    request_deserializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.ListFeaturesRequest.FromString,
                    response_serializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.ListFeaturesResponse.SerializeToString,
            ),
            'RecordRoute': grpc.stream_unary_rpc_method_handler(
                    servicer.RecordRoute,
                    request_deserializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RecordRouteRequest.FromString,
                    response_serializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RecordRouteResponse.SerializeToString,
            ),
            'RouteChat': grpc.stream_stream_rpc_method_handler(
                    servicer.RouteChat,
                    request_deserializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RouteChatRequest.FromString,
                    response_serializer=proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RouteChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'route_guide.v1.RouteGuideService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RouteGuideService(object):
    """Interface exported by the server.
    """

    @staticmethod
    def GetFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/route_guide.v1.RouteGuideService/GetFeature',
            proto_dot_route__guide_dot_v1_dot_route__guide__pb2.GetFeatureRequest.SerializeToString,
            proto_dot_route__guide_dot_v1_dot_route__guide__pb2.GetFeatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/route_guide.v1.RouteGuideService/ListFeatures',
            proto_dot_route__guide_dot_v1_dot_route__guide__pb2.ListFeaturesRequest.SerializeToString,
            proto_dot_route__guide_dot_v1_dot_route__guide__pb2.ListFeaturesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordRoute(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/route_guide.v1.RouteGuideService/RecordRoute',
            proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RecordRouteRequest.SerializeToString,
            proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RecordRouteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RouteChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/route_guide.v1.RouteGuideService/RouteChat',
            proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RouteChatRequest.SerializeToString,
            proto_dot_route__guide_dot_v1_dot_route__guide__pb2.RouteChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
