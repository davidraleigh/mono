// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/geo/v1/geometry.proto

package geo.v1;

/**
 * <pre>
 * type of geometry operators
 * </pre>
 *
 * Protobuf enum {@code geo.v1.OperatorType}
 */
public enum OperatorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_OPERATOR = 0;</code>
   */
  UNKNOWN_OPERATOR(0),
  /**
   * <pre>
   * project geometry
   * </pre>
   *
   * <code>PROJECT = 1;</code>
   */
  PROJECT(1),
  /**
   * <code>EXPORT_TO_JSON = 2;</code>
   */
  EXPORT_TO_JSON(2),
  /**
   * <code>IMPORT_FROM_JSON = 3;</code>
   */
  IMPORT_FROM_JSON(3),
  /**
   * <code>EXPORT_TO_ESRI_SHAPE = 4;</code>
   */
  EXPORT_TO_ESRI_SHAPE(4),
  /**
   * <code>IMPORT_FROM_ESRI_SHAPE = 5;</code>
   */
  IMPORT_FROM_ESRI_SHAPE(5),
  /**
   * <pre>
   * union one or more geometries
   * </pre>
   *
   * <code>UNION = 6;</code>
   */
  UNION(6),
  /**
   * <pre>
   * difference two geometries
   * </pre>
   *
   * <code>DIFFERENCE = 7;</code>
   */
  DIFFERENCE(7),
  /**
   * <code>PROXIMITY_2D = 8;</code>
   */
  PROXIMITY_2D(8),
  /**
   * <code>RELATE = 9;</code>
   */
  RELATE(9),
  /**
   * <code>EQUALS = 10;</code>
   */
  EQUALS(10),
  /**
   * <code>DISJOINT = 11;</code>
   */
  DISJOINT(11),
  /**
   * <code>INTERSECTS = 12;</code>
   */
  INTERSECTS(12),
  /**
   * <code>WITHIN = 13;</code>
   */
  WITHIN(13),
  /**
   * <code>CONTAINS = 14;</code>
   */
  CONTAINS(14),
  /**
   * <code>CROSSES = 15;</code>
   */
  CROSSES(15),
  /**
   * <code>TOUCHES = 16;</code>
   */
  TOUCHES(16),
  /**
   * <code>OVERLAPS = 17;</code>
   */
  OVERLAPS(17),
  /**
   * <code>BUFFER = 18;</code>
   */
  BUFFER(18),
  /**
   * <code>DISTANCE = 19;</code>
   */
  DISTANCE(19),
  /**
   * <code>INTERSECTION = 20;</code>
   */
  INTERSECTION(20),
  /**
   * <code>CLIP = 21;</code>
   */
  CLIP(21),
  /**
   * <code>CUT = 22;</code>
   */
  CUT(22),
  /**
   * <code>DENSIFY_BY_LENGTH = 23;</code>
   */
  DENSIFY_BY_LENGTH(23),
  /**
   * <code>GEODESIC_BUFFER = 26;</code>
   */
  GEODESIC_BUFFER(26),
  /**
   * <code>GEODETIC_DENSIFY_BY_LENGTH = 27;</code>
   */
  GEODETIC_DENSIFY_BY_LENGTH(27),
  /**
   * <code>GEODETIC_AREA = 30;</code>
   */
  GEODETIC_AREA(30),
  /**
   * <code>SIMPLIFY = 31;</code>
   */
  SIMPLIFY(31),
  /**
   * <code>SIMPLIFY_OGC = 32;</code>
   */
  SIMPLIFY_OGC(32),
  /**
   * <code>OFFSET = 33;</code>
   */
  OFFSET(33),
  /**
   * <code>GENERALIZE = 34;</code>
   */
  GENERALIZE(34),
  /**
   * <code>GENERALIZE_BY_AREA = 35;</code>
   */
  GENERALIZE_BY_AREA(35),
  /**
   * <code>EXPORT_TO_WKB = 36;</code>
   */
  EXPORT_TO_WKB(36),
  /**
   * <code>IMPORT_FROM_WKB = 37;</code>
   */
  IMPORT_FROM_WKB(37),
  /**
   * <code>EXPORT_TO_WKT = 38;</code>
   */
  EXPORT_TO_WKT(38),
  /**
   * <code>IMPORT_FROM_WKT = 39;</code>
   */
  IMPORT_FROM_WKT(39),
  /**
   * <code>IMPORT_FROM_GEOJSON = 40;</code>
   */
  IMPORT_FROM_GEOJSON(40),
  /**
   * <code>EXPORT_TO_GEOJSON = 41;</code>
   */
  EXPORT_TO_GEOJSON(41),
  /**
   * <code>SYMMETRIC_DIFFERENCE = 42;</code>
   */
  SYMMETRIC_DIFFERENCE(42),
  /**
   * <code>CONVEX_HULL = 43;</code>
   */
  CONVEX_HULL(43),
  /**
   * <code>BOUNDARY = 44;</code>
   */
  BOUNDARY(44),
  /**
   * <code>RANDOM_POINTS = 45;</code>
   */
  RANDOM_POINTS(45),
  /**
   * <code>ENCLOSING_CIRCLE = 46;</code>
   */
  ENCLOSING_CIRCLE(46),
  /**
   * <code>AFFINE_TRANSFORM = 47;</code>
   */
  AFFINE_TRANSFORM(47),
  /**
   * <code>GEODETIC_LENGTH = 48;</code>
   */
  GEODETIC_LENGTH(48),
  /**
   * <code>GEODETIC_INVERSE = 49;</code>
   */
  GEODETIC_INVERSE(49),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_OPERATOR = 0;</code>
   */
  public static final int UNKNOWN_OPERATOR_VALUE = 0;
  /**
   * <pre>
   * project geometry
   * </pre>
   *
   * <code>PROJECT = 1;</code>
   */
  public static final int PROJECT_VALUE = 1;
  /**
   * <code>EXPORT_TO_JSON = 2;</code>
   */
  public static final int EXPORT_TO_JSON_VALUE = 2;
  /**
   * <code>IMPORT_FROM_JSON = 3;</code>
   */
  public static final int IMPORT_FROM_JSON_VALUE = 3;
  /**
   * <code>EXPORT_TO_ESRI_SHAPE = 4;</code>
   */
  public static final int EXPORT_TO_ESRI_SHAPE_VALUE = 4;
  /**
   * <code>IMPORT_FROM_ESRI_SHAPE = 5;</code>
   */
  public static final int IMPORT_FROM_ESRI_SHAPE_VALUE = 5;
  /**
   * <pre>
   * union one or more geometries
   * </pre>
   *
   * <code>UNION = 6;</code>
   */
  public static final int UNION_VALUE = 6;
  /**
   * <pre>
   * difference two geometries
   * </pre>
   *
   * <code>DIFFERENCE = 7;</code>
   */
  public static final int DIFFERENCE_VALUE = 7;
  /**
   * <code>PROXIMITY_2D = 8;</code>
   */
  public static final int PROXIMITY_2D_VALUE = 8;
  /**
   * <code>RELATE = 9;</code>
   */
  public static final int RELATE_VALUE = 9;
  /**
   * <code>EQUALS = 10;</code>
   */
  public static final int EQUALS_VALUE = 10;
  /**
   * <code>DISJOINT = 11;</code>
   */
  public static final int DISJOINT_VALUE = 11;
  /**
   * <code>INTERSECTS = 12;</code>
   */
  public static final int INTERSECTS_VALUE = 12;
  /**
   * <code>WITHIN = 13;</code>
   */
  public static final int WITHIN_VALUE = 13;
  /**
   * <code>CONTAINS = 14;</code>
   */
  public static final int CONTAINS_VALUE = 14;
  /**
   * <code>CROSSES = 15;</code>
   */
  public static final int CROSSES_VALUE = 15;
  /**
   * <code>TOUCHES = 16;</code>
   */
  public static final int TOUCHES_VALUE = 16;
  /**
   * <code>OVERLAPS = 17;</code>
   */
  public static final int OVERLAPS_VALUE = 17;
  /**
   * <code>BUFFER = 18;</code>
   */
  public static final int BUFFER_VALUE = 18;
  /**
   * <code>DISTANCE = 19;</code>
   */
  public static final int DISTANCE_VALUE = 19;
  /**
   * <code>INTERSECTION = 20;</code>
   */
  public static final int INTERSECTION_VALUE = 20;
  /**
   * <code>CLIP = 21;</code>
   */
  public static final int CLIP_VALUE = 21;
  /**
   * <code>CUT = 22;</code>
   */
  public static final int CUT_VALUE = 22;
  /**
   * <code>DENSIFY_BY_LENGTH = 23;</code>
   */
  public static final int DENSIFY_BY_LENGTH_VALUE = 23;
  /**
   * <code>GEODESIC_BUFFER = 26;</code>
   */
  public static final int GEODESIC_BUFFER_VALUE = 26;
  /**
   * <code>GEODETIC_DENSIFY_BY_LENGTH = 27;</code>
   */
  public static final int GEODETIC_DENSIFY_BY_LENGTH_VALUE = 27;
  /**
   * <code>GEODETIC_AREA = 30;</code>
   */
  public static final int GEODETIC_AREA_VALUE = 30;
  /**
   * <code>SIMPLIFY = 31;</code>
   */
  public static final int SIMPLIFY_VALUE = 31;
  /**
   * <code>SIMPLIFY_OGC = 32;</code>
   */
  public static final int SIMPLIFY_OGC_VALUE = 32;
  /**
   * <code>OFFSET = 33;</code>
   */
  public static final int OFFSET_VALUE = 33;
  /**
   * <code>GENERALIZE = 34;</code>
   */
  public static final int GENERALIZE_VALUE = 34;
  /**
   * <code>GENERALIZE_BY_AREA = 35;</code>
   */
  public static final int GENERALIZE_BY_AREA_VALUE = 35;
  /**
   * <code>EXPORT_TO_WKB = 36;</code>
   */
  public static final int EXPORT_TO_WKB_VALUE = 36;
  /**
   * <code>IMPORT_FROM_WKB = 37;</code>
   */
  public static final int IMPORT_FROM_WKB_VALUE = 37;
  /**
   * <code>EXPORT_TO_WKT = 38;</code>
   */
  public static final int EXPORT_TO_WKT_VALUE = 38;
  /**
   * <code>IMPORT_FROM_WKT = 39;</code>
   */
  public static final int IMPORT_FROM_WKT_VALUE = 39;
  /**
   * <code>IMPORT_FROM_GEOJSON = 40;</code>
   */
  public static final int IMPORT_FROM_GEOJSON_VALUE = 40;
  /**
   * <code>EXPORT_TO_GEOJSON = 41;</code>
   */
  public static final int EXPORT_TO_GEOJSON_VALUE = 41;
  /**
   * <code>SYMMETRIC_DIFFERENCE = 42;</code>
   */
  public static final int SYMMETRIC_DIFFERENCE_VALUE = 42;
  /**
   * <code>CONVEX_HULL = 43;</code>
   */
  public static final int CONVEX_HULL_VALUE = 43;
  /**
   * <code>BOUNDARY = 44;</code>
   */
  public static final int BOUNDARY_VALUE = 44;
  /**
   * <code>RANDOM_POINTS = 45;</code>
   */
  public static final int RANDOM_POINTS_VALUE = 45;
  /**
   * <code>ENCLOSING_CIRCLE = 46;</code>
   */
  public static final int ENCLOSING_CIRCLE_VALUE = 46;
  /**
   * <code>AFFINE_TRANSFORM = 47;</code>
   */
  public static final int AFFINE_TRANSFORM_VALUE = 47;
  /**
   * <code>GEODETIC_LENGTH = 48;</code>
   */
  public static final int GEODETIC_LENGTH_VALUE = 48;
  /**
   * <code>GEODETIC_INVERSE = 49;</code>
   */
  public static final int GEODETIC_INVERSE_VALUE = 49;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static OperatorType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static OperatorType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_OPERATOR;
      case 1: return PROJECT;
      case 2: return EXPORT_TO_JSON;
      case 3: return IMPORT_FROM_JSON;
      case 4: return EXPORT_TO_ESRI_SHAPE;
      case 5: return IMPORT_FROM_ESRI_SHAPE;
      case 6: return UNION;
      case 7: return DIFFERENCE;
      case 8: return PROXIMITY_2D;
      case 9: return RELATE;
      case 10: return EQUALS;
      case 11: return DISJOINT;
      case 12: return INTERSECTS;
      case 13: return WITHIN;
      case 14: return CONTAINS;
      case 15: return CROSSES;
      case 16: return TOUCHES;
      case 17: return OVERLAPS;
      case 18: return BUFFER;
      case 19: return DISTANCE;
      case 20: return INTERSECTION;
      case 21: return CLIP;
      case 22: return CUT;
      case 23: return DENSIFY_BY_LENGTH;
      case 26: return GEODESIC_BUFFER;
      case 27: return GEODETIC_DENSIFY_BY_LENGTH;
      case 30: return GEODETIC_AREA;
      case 31: return SIMPLIFY;
      case 32: return SIMPLIFY_OGC;
      case 33: return OFFSET;
      case 34: return GENERALIZE;
      case 35: return GENERALIZE_BY_AREA;
      case 36: return EXPORT_TO_WKB;
      case 37: return IMPORT_FROM_WKB;
      case 38: return EXPORT_TO_WKT;
      case 39: return IMPORT_FROM_WKT;
      case 40: return IMPORT_FROM_GEOJSON;
      case 41: return EXPORT_TO_GEOJSON;
      case 42: return SYMMETRIC_DIFFERENCE;
      case 43: return CONVEX_HULL;
      case 44: return BOUNDARY;
      case 45: return RANDOM_POINTS;
      case 46: return ENCLOSING_CIRCLE;
      case 47: return AFFINE_TRANSFORM;
      case 48: return GEODETIC_LENGTH;
      case 49: return GEODETIC_INVERSE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<OperatorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      OperatorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<OperatorType>() {
          public OperatorType findValueByNumber(int number) {
            return OperatorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return geo.v1.GeometryProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final OperatorType[] VALUES = values();

  public static OperatorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private OperatorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:geo.v1.OperatorType)
}

