// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/geo/v1/geometry.proto

package geo.v1;

/**
 * <pre>
 * the state of a geometry topological correctness
 * </pre>
 *
 * Protobuf enum {@code geo.v1.SimpleState}
 */
public enum SimpleState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * on creation, after projection and after generalization a geometry has state simple unknown (not know if simple or not)
   * </pre>
   *
   * <code>SIMPLE_UNKNOWN = 0;</code>
   */
  SIMPLE_UNKNOWN(0),
  /**
   * <pre>
   * weak simple (no self intersections, ring orientation is correct, but ring order is not)
   * </pre>
   *
   * <code>WEAK_SIMPLE = 1;</code>
   */
  WEAK_SIMPLE(1),
  /**
   * <pre>
   * same as weak simple + OGC ring order.
   * </pre>
   *
   * <code>STRONG_SIMPLE = 2;</code>
   */
  STRONG_SIMPLE(2),
  /**
   * <pre>
   * is_simple method has been run on the geometry and it is known to be non-simple, but the reason is unknown
   * </pre>
   *
   * <code>NON_SIMPLE = 3;</code>
   */
  NON_SIMPLE(3),
  /**
   * <pre>
   * non-simple, because the structure is bad (0 size path, for example).
   * </pre>
   *
   * <code>STRUCTURE_FLAW = 4;</code>
   */
  STRUCTURE_FLAW(4),
  /**
   * <pre>
   * Non-simple, because there are degenerate segments.
   * </pre>
   *
   * <code>DEGENERATE_SEGMENTS = 5;</code>
   */
  DEGENERATE_SEGMENTS(5),
  /**
   * <pre>
   * Non-simple, because not clustered properly, that is there are non-coincident vertices closer than tolerance.
   * </pre>
   *
   * <code>CLUSTERING = 6;</code>
   */
  CLUSTERING(6),
  /**
   * <pre>
   * Non-simple, because not cracked properly (intersecting segments, overlaping segments)
   * </pre>
   *
   * <code>CRACKING = 7;</code>
   */
  CRACKING(7),
  /**
   * <pre>
   * Non-simple, because there are crossovers (self intersections that are not cracking case).
   * </pre>
   *
   * <code>CROSS_OVER = 8;</code>
   */
  CROSS_OVER(8),
  /**
   * <pre>
   * Non-simple, because holes or exteriors have wrong orientation.
   * </pre>
   *
   * <code>RING_ORIENTATION = 9;</code>
   */
  RING_ORIENTATION(9),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * on creation, after projection and after generalization a geometry has state simple unknown (not know if simple or not)
   * </pre>
   *
   * <code>SIMPLE_UNKNOWN = 0;</code>
   */
  public static final int SIMPLE_UNKNOWN_VALUE = 0;
  /**
   * <pre>
   * weak simple (no self intersections, ring orientation is correct, but ring order is not)
   * </pre>
   *
   * <code>WEAK_SIMPLE = 1;</code>
   */
  public static final int WEAK_SIMPLE_VALUE = 1;
  /**
   * <pre>
   * same as weak simple + OGC ring order.
   * </pre>
   *
   * <code>STRONG_SIMPLE = 2;</code>
   */
  public static final int STRONG_SIMPLE_VALUE = 2;
  /**
   * <pre>
   * is_simple method has been run on the geometry and it is known to be non-simple, but the reason is unknown
   * </pre>
   *
   * <code>NON_SIMPLE = 3;</code>
   */
  public static final int NON_SIMPLE_VALUE = 3;
  /**
   * <pre>
   * non-simple, because the structure is bad (0 size path, for example).
   * </pre>
   *
   * <code>STRUCTURE_FLAW = 4;</code>
   */
  public static final int STRUCTURE_FLAW_VALUE = 4;
  /**
   * <pre>
   * Non-simple, because there are degenerate segments.
   * </pre>
   *
   * <code>DEGENERATE_SEGMENTS = 5;</code>
   */
  public static final int DEGENERATE_SEGMENTS_VALUE = 5;
  /**
   * <pre>
   * Non-simple, because not clustered properly, that is there are non-coincident vertices closer than tolerance.
   * </pre>
   *
   * <code>CLUSTERING = 6;</code>
   */
  public static final int CLUSTERING_VALUE = 6;
  /**
   * <pre>
   * Non-simple, because not cracked properly (intersecting segments, overlaping segments)
   * </pre>
   *
   * <code>CRACKING = 7;</code>
   */
  public static final int CRACKING_VALUE = 7;
  /**
   * <pre>
   * Non-simple, because there are crossovers (self intersections that are not cracking case).
   * </pre>
   *
   * <code>CROSS_OVER = 8;</code>
   */
  public static final int CROSS_OVER_VALUE = 8;
  /**
   * <pre>
   * Non-simple, because holes or exteriors have wrong orientation.
   * </pre>
   *
   * <code>RING_ORIENTATION = 9;</code>
   */
  public static final int RING_ORIENTATION_VALUE = 9;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SimpleState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SimpleState forNumber(int value) {
    switch (value) {
      case 0: return SIMPLE_UNKNOWN;
      case 1: return WEAK_SIMPLE;
      case 2: return STRONG_SIMPLE;
      case 3: return NON_SIMPLE;
      case 4: return STRUCTURE_FLAW;
      case 5: return DEGENERATE_SEGMENTS;
      case 6: return CLUSTERING;
      case 7: return CRACKING;
      case 8: return CROSS_OVER;
      case 9: return RING_ORIENTATION;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SimpleState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SimpleState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SimpleState>() {
          public SimpleState findValueByNumber(int number) {
            return SimpleState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return geo.v1.GeometryProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final SimpleState[] VALUES = values();

  public static SimpleState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SimpleState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:geo.v1.SimpleState)
}

