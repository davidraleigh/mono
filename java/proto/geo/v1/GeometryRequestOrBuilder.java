// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/geo/v1/geometry.proto

package geo.v1;

public interface GeometryRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:geo.v1.GeometryRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * geometry to be operated on
   * </pre>
   *
   * <code>.geo.v1.GeometryData geometry = 1 [json_name = "geometry"];</code>
   * @return Whether the geometry field is set.
   */
  boolean hasGeometry();
  /**
   * <pre>
   * geometry to be operated on
   * </pre>
   *
   * <code>.geo.v1.GeometryData geometry = 1 [json_name = "geometry"];</code>
   * @return The geometry.
   */
  geo.v1.GeometryData getGeometry();
  /**
   * <pre>
   * geometry to be operated on
   * </pre>
   *
   * <code>.geo.v1.GeometryData geometry = 1 [json_name = "geometry"];</code>
   */
  geo.v1.GeometryDataOrBuilder getGeometryOrBuilder();

  /**
   * <pre>
   * if there are two geometries to operate on, then this is the first geometry
   * </pre>
   *
   * <code>.geo.v1.GeometryData left_geometry = 2 [json_name = "leftGeometry"];</code>
   * @return Whether the leftGeometry field is set.
   */
  boolean hasLeftGeometry();
  /**
   * <pre>
   * if there are two geometries to operate on, then this is the first geometry
   * </pre>
   *
   * <code>.geo.v1.GeometryData left_geometry = 2 [json_name = "leftGeometry"];</code>
   * @return The leftGeometry.
   */
  geo.v1.GeometryData getLeftGeometry();
  /**
   * <pre>
   * if there are two geometries to operate on, then this is the first geometry
   * </pre>
   *
   * <code>.geo.v1.GeometryData left_geometry = 2 [json_name = "leftGeometry"];</code>
   */
  geo.v1.GeometryDataOrBuilder getLeftGeometryOrBuilder();

  /**
   * <pre>
   * the result of the geometry request is to be operated on by this request
   * </pre>
   *
   * <code>.geo.v1.GeometryRequest geometry_request = 3 [json_name = "geometryRequest"];</code>
   * @return Whether the geometryRequest field is set.
   */
  boolean hasGeometryRequest();
  /**
   * <pre>
   * the result of the geometry request is to be operated on by this request
   * </pre>
   *
   * <code>.geo.v1.GeometryRequest geometry_request = 3 [json_name = "geometryRequest"];</code>
   * @return The geometryRequest.
   */
  geo.v1.GeometryRequest getGeometryRequest();
  /**
   * <pre>
   * the result of the geometry request is to be operated on by this request
   * </pre>
   *
   * <code>.geo.v1.GeometryRequest geometry_request = 3 [json_name = "geometryRequest"];</code>
   */
  geo.v1.GeometryRequestOrBuilder getGeometryRequestOrBuilder();

  /**
   * <pre>
   * if there are two geometries, the left geometry request is to be operated on by this request
   * </pre>
   *
   * <code>.geo.v1.GeometryRequest left_geometry_request = 4 [json_name = "leftGeometryRequest"];</code>
   * @return Whether the leftGeometryRequest field is set.
   */
  boolean hasLeftGeometryRequest();
  /**
   * <pre>
   * if there are two geometries, the left geometry request is to be operated on by this request
   * </pre>
   *
   * <code>.geo.v1.GeometryRequest left_geometry_request = 4 [json_name = "leftGeometryRequest"];</code>
   * @return The leftGeometryRequest.
   */
  geo.v1.GeometryRequest getLeftGeometryRequest();
  /**
   * <pre>
   * if there are two geometries, the left geometry request is to be operated on by this request
   * </pre>
   *
   * <code>.geo.v1.GeometryRequest left_geometry_request = 4 [json_name = "leftGeometryRequest"];</code>
   */
  geo.v1.GeometryRequestOrBuilder getLeftGeometryRequestOrBuilder();

  /**
   * <pre>
   * if there are two geometries to operate on, then this is the second geometry
   * </pre>
   *
   * <code>.geo.v1.GeometryData right_geometry = 5 [json_name = "rightGeometry"];</code>
   * @return Whether the rightGeometry field is set.
   */
  boolean hasRightGeometry();
  /**
   * <pre>
   * if there are two geometries to operate on, then this is the second geometry
   * </pre>
   *
   * <code>.geo.v1.GeometryData right_geometry = 5 [json_name = "rightGeometry"];</code>
   * @return The rightGeometry.
   */
  geo.v1.GeometryData getRightGeometry();
  /**
   * <pre>
   * if there are two geometries to operate on, then this is the second geometry
   * </pre>
   *
   * <code>.geo.v1.GeometryData right_geometry = 5 [json_name = "rightGeometry"];</code>
   */
  geo.v1.GeometryDataOrBuilder getRightGeometryOrBuilder();

  /**
   * <pre>
   * if there are two geometries, the right geometry request is to be operated on by this request
   * </pre>
   *
   * <code>.geo.v1.GeometryRequest right_geometry_request = 6 [json_name = "rightGeometryRequest"];</code>
   * @return Whether the rightGeometryRequest field is set.
   */
  boolean hasRightGeometryRequest();
  /**
   * <pre>
   * if there are two geometries, the right geometry request is to be operated on by this request
   * </pre>
   *
   * <code>.geo.v1.GeometryRequest right_geometry_request = 6 [json_name = "rightGeometryRequest"];</code>
   * @return The rightGeometryRequest.
   */
  geo.v1.GeometryRequest getRightGeometryRequest();
  /**
   * <pre>
   * if there are two geometries, the right geometry request is to be operated on by this request
   * </pre>
   *
   * <code>.geo.v1.GeometryRequest right_geometry_request = 6 [json_name = "rightGeometryRequest"];</code>
   */
  geo.v1.GeometryRequestOrBuilder getRightGeometryRequestOrBuilder();

  /**
   * <pre>
   * (default is PROJECT) geometry operation to perform on input geometries
   * </pre>
   *
   * <code>.geo.v1.OperatorType operator = 7 [json_name = "operator"];</code>
   * @return The enum numeric value on the wire for operator.
   */
  int getOperatorValue();
  /**
   * <pre>
   * (default is PROJECT) geometry operation to perform on input geometries
   * </pre>
   *
   * <code>.geo.v1.OperatorType operator = 7 [json_name = "operator"];</code>
   * @return The operator.
   */
  geo.v1.OperatorType getOperator();

  /**
   * <pre>
   * (default is wkb) encoding, wkt, wkb, esri_shape, etc
   * </pre>
   *
   * <code>.geo.v1.Encoding result_encoding = 8 [json_name = "resultEncoding"];</code>
   * @return The enum numeric value on the wire for resultEncoding.
   */
  int getResultEncodingValue();
  /**
   * <pre>
   * (default is wkb) encoding, wkt, wkb, esri_shape, etc
   * </pre>
   *
   * <code>.geo.v1.Encoding result_encoding = 8 [json_name = "resultEncoding"];</code>
   * @return The resultEncoding.
   */
  geo.v1.Encoding getResultEncoding();

  /**
   * <pre>
   * (optional) the spatial reference the geometric operation should take place in. If both inputs are in different spatial references, you can use this to define a common reference system for the geometric operation.
   * </pre>
   *
   * <code>.geo.v1.ProjectionData operation_proj = 9 [json_name = "operationProj"];</code>
   * @return Whether the operationProj field is set.
   */
  boolean hasOperationProj();
  /**
   * <pre>
   * (optional) the spatial reference the geometric operation should take place in. If both inputs are in different spatial references, you can use this to define a common reference system for the geometric operation.
   * </pre>
   *
   * <code>.geo.v1.ProjectionData operation_proj = 9 [json_name = "operationProj"];</code>
   * @return The operationProj.
   */
  geo.v1.ProjectionData getOperationProj();
  /**
   * <pre>
   * (optional) the spatial reference the geometric operation should take place in. If both inputs are in different spatial references, you can use this to define a common reference system for the geometric operation.
   * </pre>
   *
   * <code>.geo.v1.ProjectionData operation_proj = 9 [json_name = "operationProj"];</code>
   */
  geo.v1.ProjectionDataOrBuilder getOperationProjOrBuilder();

  /**
   * <pre>
   * (optional) after the operation has been completed, project the results to a new spatial reference.
   * </pre>
   *
   * <code>.geo.v1.ProjectionData result_proj = 10 [json_name = "resultProj"];</code>
   * @return Whether the resultProj field is set.
   */
  boolean hasResultProj();
  /**
   * <pre>
   * (optional) after the operation has been completed, project the results to a new spatial reference.
   * </pre>
   *
   * <code>.geo.v1.ProjectionData result_proj = 10 [json_name = "resultProj"];</code>
   * @return The resultProj.
   */
  geo.v1.ProjectionData getResultProj();
  /**
   * <pre>
   * (optional) after the operation has been completed, project the results to a new spatial reference.
   * </pre>
   *
   * <code>.geo.v1.ProjectionData result_proj = 10 [json_name = "resultProj"];</code>
   */
  geo.v1.ProjectionDataOrBuilder getResultProjOrBuilder();

  /**
   * <code>.geo.v1.Params.Buffer buffer_params = 11 [json_name = "bufferParams"];</code>
   * @return Whether the bufferParams field is set.
   */
  boolean hasBufferParams();
  /**
   * <code>.geo.v1.Params.Buffer buffer_params = 11 [json_name = "bufferParams"];</code>
   * @return The bufferParams.
   */
  geo.v1.Params.Buffer getBufferParams();
  /**
   * <code>.geo.v1.Params.Buffer buffer_params = 11 [json_name = "bufferParams"];</code>
   */
  geo.v1.Params.BufferOrBuilder getBufferParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.Convex convex_params = 12 [json_name = "convexParams"];</code>
   * @return Whether the convexParams field is set.
   */
  boolean hasConvexParams();
  /**
   * <code>.geo.v1.Params.Convex convex_params = 12 [json_name = "convexParams"];</code>
   * @return The convexParams.
   */
  geo.v1.Params.Convex getConvexParams();
  /**
   * <code>.geo.v1.Params.Convex convex_params = 12 [json_name = "convexParams"];</code>
   */
  geo.v1.Params.ConvexOrBuilder getConvexParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.Relate relate_params = 13 [json_name = "relateParams"];</code>
   * @return Whether the relateParams field is set.
   */
  boolean hasRelateParams();
  /**
   * <code>.geo.v1.Params.Relate relate_params = 13 [json_name = "relateParams"];</code>
   * @return The relateParams.
   */
  geo.v1.Params.Relate getRelateParams();
  /**
   * <code>.geo.v1.Params.Relate relate_params = 13 [json_name = "relateParams"];</code>
   */
  geo.v1.Params.RelateOrBuilder getRelateParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.RandomPoints random_points_params = 14 [json_name = "randomPointsParams"];</code>
   * @return Whether the randomPointsParams field is set.
   */
  boolean hasRandomPointsParams();
  /**
   * <code>.geo.v1.Params.RandomPoints random_points_params = 14 [json_name = "randomPointsParams"];</code>
   * @return The randomPointsParams.
   */
  geo.v1.Params.RandomPoints getRandomPointsParams();
  /**
   * <code>.geo.v1.Params.RandomPoints random_points_params = 14 [json_name = "randomPointsParams"];</code>
   */
  geo.v1.Params.RandomPointsOrBuilder getRandomPointsParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.Generalize generalize_params = 15 [json_name = "generalizeParams"];</code>
   * @return Whether the generalizeParams field is set.
   */
  boolean hasGeneralizeParams();
  /**
   * <code>.geo.v1.Params.Generalize generalize_params = 15 [json_name = "generalizeParams"];</code>
   * @return The generalizeParams.
   */
  geo.v1.Params.Generalize getGeneralizeParams();
  /**
   * <code>.geo.v1.Params.Generalize generalize_params = 15 [json_name = "generalizeParams"];</code>
   */
  geo.v1.Params.GeneralizeOrBuilder getGeneralizeParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.Intersection intersection_params = 16 [json_name = "intersectionParams"];</code>
   * @return Whether the intersectionParams field is set.
   */
  boolean hasIntersectionParams();
  /**
   * <code>.geo.v1.Params.Intersection intersection_params = 16 [json_name = "intersectionParams"];</code>
   * @return The intersectionParams.
   */
  geo.v1.Params.Intersection getIntersectionParams();
  /**
   * <code>.geo.v1.Params.Intersection intersection_params = 16 [json_name = "intersectionParams"];</code>
   */
  geo.v1.Params.IntersectionOrBuilder getIntersectionParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.Offset offset_params = 17 [json_name = "offsetParams"];</code>
   * @return Whether the offsetParams field is set.
   */
  boolean hasOffsetParams();
  /**
   * <code>.geo.v1.Params.Offset offset_params = 17 [json_name = "offsetParams"];</code>
   * @return The offsetParams.
   */
  geo.v1.Params.Offset getOffsetParams();
  /**
   * <code>.geo.v1.Params.Offset offset_params = 17 [json_name = "offsetParams"];</code>
   */
  geo.v1.Params.OffsetOrBuilder getOffsetParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.Cut cut_params = 18 [json_name = "cutParams"];</code>
   * @return Whether the cutParams field is set.
   */
  boolean hasCutParams();
  /**
   * <code>.geo.v1.Params.Cut cut_params = 18 [json_name = "cutParams"];</code>
   * @return The cutParams.
   */
  geo.v1.Params.Cut getCutParams();
  /**
   * <code>.geo.v1.Params.Cut cut_params = 18 [json_name = "cutParams"];</code>
   */
  geo.v1.Params.CutOrBuilder getCutParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.Clip clip_params = 19 [json_name = "clipParams"];</code>
   * @return Whether the clipParams field is set.
   */
  boolean hasClipParams();
  /**
   * <code>.geo.v1.Params.Clip clip_params = 19 [json_name = "clipParams"];</code>
   * @return The clipParams.
   */
  geo.v1.Params.Clip getClipParams();
  /**
   * <code>.geo.v1.Params.Clip clip_params = 19 [json_name = "clipParams"];</code>
   */
  geo.v1.Params.ClipOrBuilder getClipParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.Densify densify_params = 20 [json_name = "densifyParams"];</code>
   * @return Whether the densifyParams field is set.
   */
  boolean hasDensifyParams();
  /**
   * <code>.geo.v1.Params.Densify densify_params = 20 [json_name = "densifyParams"];</code>
   * @return The densifyParams.
   */
  geo.v1.Params.Densify getDensifyParams();
  /**
   * <code>.geo.v1.Params.Densify densify_params = 20 [json_name = "densifyParams"];</code>
   */
  geo.v1.Params.DensifyOrBuilder getDensifyParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.Simplify simplify_params = 21 [json_name = "simplifyParams"];</code>
   * @return Whether the simplifyParams field is set.
   */
  boolean hasSimplifyParams();
  /**
   * <code>.geo.v1.Params.Simplify simplify_params = 21 [json_name = "simplifyParams"];</code>
   * @return The simplifyParams.
   */
  geo.v1.Params.Simplify getSimplifyParams();
  /**
   * <code>.geo.v1.Params.Simplify simplify_params = 21 [json_name = "simplifyParams"];</code>
   */
  geo.v1.Params.SimplifyOrBuilder getSimplifyParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.GeneralizeByArea generalize_by_area_params = 22 [json_name = "generalizeByAreaParams"];</code>
   * @return Whether the generalizeByAreaParams field is set.
   */
  boolean hasGeneralizeByAreaParams();
  /**
   * <code>.geo.v1.Params.GeneralizeByArea generalize_by_area_params = 22 [json_name = "generalizeByAreaParams"];</code>
   * @return The generalizeByAreaParams.
   */
  geo.v1.Params.GeneralizeByArea getGeneralizeByAreaParams();
  /**
   * <code>.geo.v1.Params.GeneralizeByArea generalize_by_area_params = 22 [json_name = "generalizeByAreaParams"];</code>
   */
  geo.v1.Params.GeneralizeByAreaOrBuilder getGeneralizeByAreaParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.AffineTransform affine_transform_params = 23 [json_name = "affineTransformParams"];</code>
   * @return Whether the affineTransformParams field is set.
   */
  boolean hasAffineTransformParams();
  /**
   * <code>.geo.v1.Params.AffineTransform affine_transform_params = 23 [json_name = "affineTransformParams"];</code>
   * @return The affineTransformParams.
   */
  geo.v1.Params.AffineTransform getAffineTransformParams();
  /**
   * <code>.geo.v1.Params.AffineTransform affine_transform_params = 23 [json_name = "affineTransformParams"];</code>
   */
  geo.v1.Params.AffineTransformOrBuilder getAffineTransformParamsOrBuilder();

  /**
   * <code>.geo.v1.Params.GeodeticBuffer geodetic_buffer_params = 24 [json_name = "geodeticBufferParams"];</code>
   * @return Whether the geodeticBufferParams field is set.
   */
  boolean hasGeodeticBufferParams();
  /**
   * <code>.geo.v1.Params.GeodeticBuffer geodetic_buffer_params = 24 [json_name = "geodeticBufferParams"];</code>
   * @return The geodeticBufferParams.
   */
  geo.v1.Params.GeodeticBuffer getGeodeticBufferParams();
  /**
   * <code>.geo.v1.Params.GeodeticBuffer geodetic_buffer_params = 24 [json_name = "geodeticBufferParams"];</code>
   */
  geo.v1.Params.GeodeticBufferOrBuilder getGeodeticBufferParamsOrBuilder();

  public geo.v1.GeometryRequest.LeftCase getLeftCase();

  public geo.v1.GeometryRequest.RightCase getRightCase();

  public geo.v1.GeometryRequest.ParamsCase getParamsCase();
}
