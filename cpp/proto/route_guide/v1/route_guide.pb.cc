// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route_guide/v1/route_guide.proto

#include "route_guide/v1/route_guide.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace route_guide {
namespace v1 {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/ 0

  , /*decltype(_impl_.longitude_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR ListFeaturesRequest::ListFeaturesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lo_)*/nullptr
  , /*decltype(_impl_.hi_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListFeaturesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListFeaturesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListFeaturesRequestDefaultTypeInternal() {}
  union {
    ListFeaturesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListFeaturesRequestDefaultTypeInternal _ListFeaturesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFeatureResponse::GetFeatureResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFeatureResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFeatureResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFeatureResponseDefaultTypeInternal() {}
  union {
    GetFeatureResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFeatureResponseDefaultTypeInternal _GetFeatureResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFeatureRequest::GetFeatureRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFeatureRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFeatureRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFeatureRequestDefaultTypeInternal() {}
  union {
    GetFeatureRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFeatureRequestDefaultTypeInternal _GetFeatureRequest_default_instance_;
PROTOBUF_CONSTEXPR ListFeaturesResponse::ListFeaturesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListFeaturesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListFeaturesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListFeaturesResponseDefaultTypeInternal() {}
  union {
    ListFeaturesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListFeaturesResponseDefaultTypeInternal _ListFeaturesResponse_default_instance_;
PROTOBUF_CONSTEXPR RecordRouteRequest::RecordRouteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordRouteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordRouteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordRouteRequestDefaultTypeInternal() {}
  union {
    RecordRouteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordRouteRequestDefaultTypeInternal _RecordRouteRequest_default_instance_;
PROTOBUF_CONSTEXPR RouteChatRequest::RouteChatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_note_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteChatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteChatRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteChatRequestDefaultTypeInternal() {}
  union {
    RouteChatRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteChatRequestDefaultTypeInternal _RouteChatRequest_default_instance_;
PROTOBUF_CONSTEXPR RouteChatResponse::RouteChatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_note_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteChatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteChatResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteChatResponseDefaultTypeInternal() {}
  union {
    RouteChatResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteChatResponseDefaultTypeInternal _RouteChatResponse_default_instance_;
PROTOBUF_CONSTEXPR Feature::Feature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureDefaultTypeInternal _Feature_default_instance_;
PROTOBUF_CONSTEXPR FeatureDatabase::FeatureDatabase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeatureDatabaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureDatabaseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureDatabaseDefaultTypeInternal() {}
  union {
    FeatureDatabase _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureDatabaseDefaultTypeInternal _FeatureDatabase_default_instance_;
PROTOBUF_CONSTEXPR RouteNote::RouteNote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteNoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteNoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteNoteDefaultTypeInternal() {}
  union {
    RouteNote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteNoteDefaultTypeInternal _RouteNote_default_instance_;
PROTOBUF_CONSTEXPR RecordRouteResponse::RecordRouteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_count_)*/ 0

  , /*decltype(_impl_.feature_count_)*/ 0

  , /*decltype(_impl_.distance_)*/ 0

  , /*decltype(_impl_.elapsed_time_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordRouteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordRouteResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordRouteResponseDefaultTypeInternal() {}
  union {
    RecordRouteResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordRouteResponseDefaultTypeInternal _RecordRouteResponse_default_instance_;
}  // namespace v1
}  // namespace route_guide
static ::_pb::Metadata file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[12];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_route_5fguide_2fv1_2froute_5fguide_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_route_5fguide_2fv1_2froute_5fguide_2eproto = nullptr;
const ::uint32_t TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::Point, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::Point, _impl_.latitude_),
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::Point, _impl_.longitude_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesRequest, _impl_.lo_),
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesRequest, _impl_.hi_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::GetFeatureResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::GetFeatureResponse, _impl_.feature_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::GetFeatureRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::GetFeatureRequest, _impl_.point_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesResponse, _impl_.feature_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteRequest, _impl_.point_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteChatRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteChatRequest, _impl_.route_note_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteChatResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteChatResponse, _impl_.route_note_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::Feature, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::Feature, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::Feature, _impl_.location_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::FeatureDatabase, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::FeatureDatabase, _impl_.feature_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteNote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteNote, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteNote, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, _impl_.point_count_),
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, _impl_.feature_count_),
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, _impl_.distance_),
    PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, _impl_.elapsed_time_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::route_guide::v1::Point)},
        { 10, -1, -1, sizeof(::route_guide::v1::ListFeaturesRequest)},
        { 20, -1, -1, sizeof(::route_guide::v1::GetFeatureResponse)},
        { 29, -1, -1, sizeof(::route_guide::v1::GetFeatureRequest)},
        { 38, -1, -1, sizeof(::route_guide::v1::ListFeaturesResponse)},
        { 47, -1, -1, sizeof(::route_guide::v1::RecordRouteRequest)},
        { 56, -1, -1, sizeof(::route_guide::v1::RouteChatRequest)},
        { 65, -1, -1, sizeof(::route_guide::v1::RouteChatResponse)},
        { 74, -1, -1, sizeof(::route_guide::v1::Feature)},
        { 84, -1, -1, sizeof(::route_guide::v1::FeatureDatabase)},
        { 93, -1, -1, sizeof(::route_guide::v1::RouteNote)},
        { 103, -1, -1, sizeof(::route_guide::v1::RecordRouteResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::route_guide::v1::_Point_default_instance_._instance,
    &::route_guide::v1::_ListFeaturesRequest_default_instance_._instance,
    &::route_guide::v1::_GetFeatureResponse_default_instance_._instance,
    &::route_guide::v1::_GetFeatureRequest_default_instance_._instance,
    &::route_guide::v1::_ListFeaturesResponse_default_instance_._instance,
    &::route_guide::v1::_RecordRouteRequest_default_instance_._instance,
    &::route_guide::v1::_RouteChatRequest_default_instance_._instance,
    &::route_guide::v1::_RouteChatResponse_default_instance_._instance,
    &::route_guide::v1::_Feature_default_instance_._instance,
    &::route_guide::v1::_FeatureDatabase_default_instance_._instance,
    &::route_guide::v1::_RouteNote_default_instance_._instance,
    &::route_guide::v1::_RecordRouteResponse_default_instance_._instance,
};
const char descriptor_table_protodef_route_5fguide_2fv1_2froute_5fguide_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n route_guide/v1/route_guide.proto\022\016rout"
    "e_guide.v1\"A\n\005Point\022\032\n\010latitude\030\001 \001(\005R\010l"
    "atitude\022\034\n\tlongitude\030\002 \001(\005R\tlongitude\"c\n"
    "\023ListFeaturesRequest\022%\n\002lo\030\001 \001(\0132\025.route"
    "_guide.v1.PointR\002lo\022%\n\002hi\030\002 \001(\0132\025.route_"
    "guide.v1.PointR\002hi\"G\n\022GetFeatureResponse"
    "\0221\n\007feature\030\001 \001(\0132\027.route_guide.v1.Featu"
    "reR\007feature\"@\n\021GetFeatureRequest\022+\n\005poin"
    "t\030\001 \001(\0132\025.route_guide.v1.PointR\005point\"I\n"
    "\024ListFeaturesResponse\0221\n\007feature\030\001 \001(\0132\027"
    ".route_guide.v1.FeatureR\007feature\"A\n\022Reco"
    "rdRouteRequest\022+\n\005point\030\001 \001(\0132\025.route_gu"
    "ide.v1.PointR\005point\"L\n\020RouteChatRequest\022"
    "8\n\nroute_note\030\001 \001(\0132\031.route_guide.v1.Rou"
    "teNoteR\trouteNote\"M\n\021RouteChatResponse\0228"
    "\n\nroute_note\030\001 \001(\0132\031.route_guide.v1.Rout"
    "eNoteR\trouteNote\"P\n\007Feature\022\022\n\004name\030\001 \001("
    "\tR\004name\0221\n\010location\030\002 \001(\0132\025.route_guide."
    "v1.PointR\010location\"D\n\017FeatureDatabase\0221\n"
    "\007feature\030\001 \003(\0132\027.route_guide.v1.FeatureR"
    "\007feature\"X\n\tRouteNote\0221\n\010location\030\001 \001(\0132"
    "\025.route_guide.v1.PointR\010location\022\030\n\007mess"
    "age\030\002 \001(\tR\007message\"\232\001\n\023RecordRouteRespon"
    "se\022\037\n\013point_count\030\001 \001(\005R\npointCount\022#\n\rf"
    "eature_count\030\002 \001(\005R\014featureCount\022\032\n\010dist"
    "ance\030\003 \001(\005R\010distance\022!\n\014elapsed_time\030\004 \001"
    "(\005R\013elapsedTime2\375\002\n\021RouteGuideService\022U\n"
    "\nGetFeature\022!.route_guide.v1.GetFeatureR"
    "equest\032\".route_guide.v1.GetFeatureRespon"
    "se\"\000\022]\n\014ListFeatures\022#.route_guide.v1.Li"
    "stFeaturesRequest\032$.route_guide.v1.ListF"
    "eaturesResponse\"\0000\001\022Z\n\013RecordRoute\022\".rou"
    "te_guide.v1.RecordRouteRequest\032#.route_g"
    "uide.v1.RecordRouteResponse\"\000(\001\022V\n\tRoute"
    "Chat\022 .route_guide.v1.RouteChatRequest\032!"
    ".route_guide.v1.RouteChatResponse\"\000(\0010\001B"
    "~\n\026io.grpc.route_guide.v1B\017RouteGuidePro"
    "toP\001Z2github.com/davidraleigh/mono/golan"
    "g/route_guide/v1\242\002\003RTG\252\002\026io.grpc.route_g"
    "uide.v1b\006proto3"
};
static ::absl::once_flag descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto = {
    false,
    false,
    1575,
    descriptor_table_protodef_route_5fguide_2fv1_2froute_5fguide_2eproto,
    "route_guide/v1/route_guide.proto",
    &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
    nullptr,
    0,
    12,
    schemas,
    file_default_instances,
    TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto::offsets,
    file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto,
    file_level_enum_descriptors_route_5fguide_2fv1_2froute_5fguide_2eproto,
    file_level_service_descriptors_route_5fguide_2fv1_2froute_5fguide_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter() {
  return &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_route_5fguide_2fv1_2froute_5fguide_2eproto(&descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto);
namespace route_guide {
namespace v1 {
// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.Point)
}

inline void Point::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_) { 0 }

    , decltype(_impl_.longitude_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:route_guide.v1.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.Point)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 latitude = 1 [json_name = "latitude"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 longitude = 2 [json_name = "longitude"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Point::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.Point)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 latitude = 1 [json_name = "latitude"];
  if (this->_internal_latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_latitude(), target);
  }

  // int32 longitude = 2 [json_name = "longitude"];
  if (this->_internal_longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.Point)
  return target;
}

::size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.Point)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 latitude = 1 [json_name = "latitude"];
  if (this->_internal_latitude() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_latitude());
  }

  // int32 longitude = 2 [json_name = "longitude"];
  if (this->_internal_longitude() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_longitude());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.Point)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_latitude() != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_longitude() != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.longitude_)
      + sizeof(Point::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[0]);
}
// ===================================================================

class ListFeaturesRequest::_Internal {
 public:
  static const ::route_guide::v1::Point& lo(const ListFeaturesRequest* msg);
  static const ::route_guide::v1::Point& hi(const ListFeaturesRequest* msg);
};

const ::route_guide::v1::Point&
ListFeaturesRequest::_Internal::lo(const ListFeaturesRequest* msg) {
  return *msg->_impl_.lo_;
}
const ::route_guide::v1::Point&
ListFeaturesRequest::_Internal::hi(const ListFeaturesRequest* msg) {
  return *msg->_impl_.hi_;
}
ListFeaturesRequest::ListFeaturesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.ListFeaturesRequest)
}
ListFeaturesRequest::ListFeaturesRequest(const ListFeaturesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListFeaturesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lo_){nullptr}
    , decltype(_impl_.hi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lo()) {
    _this->_impl_.lo_ = new ::route_guide::v1::Point(*from._impl_.lo_);
  }
  if (from._internal_has_hi()) {
    _this->_impl_.hi_ = new ::route_guide::v1::Point(*from._impl_.hi_);
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.ListFeaturesRequest)
}

inline void ListFeaturesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.lo_){nullptr}
    , decltype(_impl_.hi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListFeaturesRequest::~ListFeaturesRequest() {
  // @@protoc_insertion_point(destructor:route_guide.v1.ListFeaturesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListFeaturesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lo_;
  if (this != internal_default_instance()) delete _impl_.hi_;
}

void ListFeaturesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListFeaturesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.ListFeaturesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListFeaturesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Point lo = 1 [json_name = "lo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .route_guide.v1.Point hi = 2 [json_name = "hi"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListFeaturesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.ListFeaturesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Point lo = 1 [json_name = "lo"];
  if (this->_internal_has_lo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lo(this),
        _Internal::lo(this).GetCachedSize(), target, stream);
  }

  // .route_guide.v1.Point hi = 2 [json_name = "hi"];
  if (this->_internal_has_hi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hi(this),
        _Internal::hi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.ListFeaturesRequest)
  return target;
}

::size_t ListFeaturesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.ListFeaturesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Point lo = 1 [json_name = "lo"];
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lo_);
  }

  // .route_guide.v1.Point hi = 2 [json_name = "hi"];
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListFeaturesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListFeaturesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListFeaturesRequest::GetClassData() const { return &_class_data_; }


void ListFeaturesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListFeaturesRequest*>(&to_msg);
  auto& from = static_cast<const ListFeaturesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.ListFeaturesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lo()) {
    _this->_internal_mutable_lo()->::route_guide::v1::Point::MergeFrom(
        from._internal_lo());
  }
  if (from._internal_has_hi()) {
    _this->_internal_mutable_hi()->::route_guide::v1::Point::MergeFrom(
        from._internal_hi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListFeaturesRequest::CopyFrom(const ListFeaturesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.ListFeaturesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFeaturesRequest::IsInitialized() const {
  return true;
}

void ListFeaturesRequest::InternalSwap(ListFeaturesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListFeaturesRequest, _impl_.hi_)
      + sizeof(ListFeaturesRequest::_impl_.hi_)
      - PROTOBUF_FIELD_OFFSET(ListFeaturesRequest, _impl_.lo_)>(
          reinterpret_cast<char*>(&_impl_.lo_),
          reinterpret_cast<char*>(&other->_impl_.lo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFeaturesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[1]);
}
// ===================================================================

class GetFeatureResponse::_Internal {
 public:
  static const ::route_guide::v1::Feature& feature(const GetFeatureResponse* msg);
};

const ::route_guide::v1::Feature&
GetFeatureResponse::_Internal::feature(const GetFeatureResponse* msg) {
  return *msg->_impl_.feature_;
}
GetFeatureResponse::GetFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.GetFeatureResponse)
}
GetFeatureResponse::GetFeatureResponse(const GetFeatureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFeatureResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_feature()) {
    _this->_impl_.feature_ = new ::route_guide::v1::Feature(*from._impl_.feature_);
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.GetFeatureResponse)
}

inline void GetFeatureResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFeatureResponse::~GetFeatureResponse() {
  // @@protoc_insertion_point(destructor:route_guide.v1.GetFeatureResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFeatureResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.feature_;
}

void GetFeatureResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFeatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.GetFeatureResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFeatureResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetFeatureResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.GetFeatureResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  if (this->_internal_has_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feature(this),
        _Internal::feature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.GetFeatureResponse)
  return target;
}

::size_t GetFeatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.GetFeatureResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFeatureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFeatureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFeatureResponse::GetClassData() const { return &_class_data_; }


void GetFeatureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFeatureResponse*>(&to_msg);
  auto& from = static_cast<const GetFeatureResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.GetFeatureResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_feature()) {
    _this->_internal_mutable_feature()->::route_guide::v1::Feature::MergeFrom(
        from._internal_feature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFeatureResponse::CopyFrom(const GetFeatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.GetFeatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeatureResponse::IsInitialized() const {
  return true;
}

void GetFeatureResponse::InternalSwap(GetFeatureResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.feature_, other->_impl_.feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeatureResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[2]);
}
// ===================================================================

class GetFeatureRequest::_Internal {
 public:
  static const ::route_guide::v1::Point& point(const GetFeatureRequest* msg);
};

const ::route_guide::v1::Point&
GetFeatureRequest::_Internal::point(const GetFeatureRequest* msg) {
  return *msg->_impl_.point_;
}
GetFeatureRequest::GetFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.GetFeatureRequest)
}
GetFeatureRequest::GetFeatureRequest(const GetFeatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFeatureRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    _this->_impl_.point_ = new ::route_guide::v1::Point(*from._impl_.point_);
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.GetFeatureRequest)
}

inline void GetFeatureRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFeatureRequest::~GetFeatureRequest() {
  // @@protoc_insertion_point(destructor:route_guide.v1.GetFeatureRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFeatureRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.point_;
}

void GetFeatureRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFeatureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.GetFeatureRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFeatureRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Point point = 1 [json_name = "point"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetFeatureRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.GetFeatureRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Point point = 1 [json_name = "point"];
  if (this->_internal_has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.GetFeatureRequest)
  return target;
}

::size_t GetFeatureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.GetFeatureRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Point point = 1 [json_name = "point"];
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFeatureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFeatureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFeatureRequest::GetClassData() const { return &_class_data_; }


void GetFeatureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFeatureRequest*>(&to_msg);
  auto& from = static_cast<const GetFeatureRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.GetFeatureRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_point()) {
    _this->_internal_mutable_point()->::route_guide::v1::Point::MergeFrom(
        from._internal_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFeatureRequest::CopyFrom(const GetFeatureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.GetFeatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeatureRequest::IsInitialized() const {
  return true;
}

void GetFeatureRequest::InternalSwap(GetFeatureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.point_, other->_impl_.point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeatureRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[3]);
}
// ===================================================================

class ListFeaturesResponse::_Internal {
 public:
  static const ::route_guide::v1::Feature& feature(const ListFeaturesResponse* msg);
};

const ::route_guide::v1::Feature&
ListFeaturesResponse::_Internal::feature(const ListFeaturesResponse* msg) {
  return *msg->_impl_.feature_;
}
ListFeaturesResponse::ListFeaturesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.ListFeaturesResponse)
}
ListFeaturesResponse::ListFeaturesResponse(const ListFeaturesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListFeaturesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_feature()) {
    _this->_impl_.feature_ = new ::route_guide::v1::Feature(*from._impl_.feature_);
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.ListFeaturesResponse)
}

inline void ListFeaturesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListFeaturesResponse::~ListFeaturesResponse() {
  // @@protoc_insertion_point(destructor:route_guide.v1.ListFeaturesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListFeaturesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.feature_;
}

void ListFeaturesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListFeaturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.ListFeaturesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListFeaturesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListFeaturesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.ListFeaturesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  if (this->_internal_has_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feature(this),
        _Internal::feature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.ListFeaturesResponse)
  return target;
}

::size_t ListFeaturesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.ListFeaturesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListFeaturesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListFeaturesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListFeaturesResponse::GetClassData() const { return &_class_data_; }


void ListFeaturesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListFeaturesResponse*>(&to_msg);
  auto& from = static_cast<const ListFeaturesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.ListFeaturesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_feature()) {
    _this->_internal_mutable_feature()->::route_guide::v1::Feature::MergeFrom(
        from._internal_feature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListFeaturesResponse::CopyFrom(const ListFeaturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.ListFeaturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFeaturesResponse::IsInitialized() const {
  return true;
}

void ListFeaturesResponse::InternalSwap(ListFeaturesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.feature_, other->_impl_.feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFeaturesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[4]);
}
// ===================================================================

class RecordRouteRequest::_Internal {
 public:
  static const ::route_guide::v1::Point& point(const RecordRouteRequest* msg);
};

const ::route_guide::v1::Point&
RecordRouteRequest::_Internal::point(const RecordRouteRequest* msg) {
  return *msg->_impl_.point_;
}
RecordRouteRequest::RecordRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RecordRouteRequest)
}
RecordRouteRequest::RecordRouteRequest(const RecordRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordRouteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    _this->_impl_.point_ = new ::route_guide::v1::Point(*from._impl_.point_);
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RecordRouteRequest)
}

inline void RecordRouteRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecordRouteRequest::~RecordRouteRequest() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RecordRouteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordRouteRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.point_;
}

void RecordRouteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RecordRouteRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRouteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Point point = 1 [json_name = "point"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RecordRouteRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RecordRouteRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Point point = 1 [json_name = "point"];
  if (this->_internal_has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RecordRouteRequest)
  return target;
}

::size_t RecordRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RecordRouteRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Point point = 1 [json_name = "point"];
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordRouteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordRouteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordRouteRequest::GetClassData() const { return &_class_data_; }


void RecordRouteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordRouteRequest*>(&to_msg);
  auto& from = static_cast<const RecordRouteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RecordRouteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_point()) {
    _this->_internal_mutable_point()->::route_guide::v1::Point::MergeFrom(
        from._internal_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordRouteRequest::CopyFrom(const RecordRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RecordRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRouteRequest::IsInitialized() const {
  return true;
}

void RecordRouteRequest::InternalSwap(RecordRouteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.point_, other->_impl_.point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRouteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[5]);
}
// ===================================================================

class RouteChatRequest::_Internal {
 public:
  static const ::route_guide::v1::RouteNote& route_note(const RouteChatRequest* msg);
};

const ::route_guide::v1::RouteNote&
RouteChatRequest::_Internal::route_note(const RouteChatRequest* msg) {
  return *msg->_impl_.route_note_;
}
RouteChatRequest::RouteChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RouteChatRequest)
}
RouteChatRequest::RouteChatRequest(const RouteChatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteChatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_note_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_route_note()) {
    _this->_impl_.route_note_ = new ::route_guide::v1::RouteNote(*from._impl_.route_note_);
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RouteChatRequest)
}

inline void RouteChatRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.route_note_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteChatRequest::~RouteChatRequest() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RouteChatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteChatRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.route_note_;
}

void RouteChatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RouteChatRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.route_note_ != nullptr) {
    delete _impl_.route_note_;
  }
  _impl_.route_note_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteChatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_note(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RouteChatRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RouteChatRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  if (this->_internal_has_route_note()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::route_note(this),
        _Internal::route_note(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RouteChatRequest)
  return target;
}

::size_t RouteChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RouteChatRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  if (this->_internal_has_route_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.route_note_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteChatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteChatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteChatRequest::GetClassData() const { return &_class_data_; }


void RouteChatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteChatRequest*>(&to_msg);
  auto& from = static_cast<const RouteChatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RouteChatRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_route_note()) {
    _this->_internal_mutable_route_note()->::route_guide::v1::RouteNote::MergeFrom(
        from._internal_route_note());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteChatRequest::CopyFrom(const RouteChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RouteChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteChatRequest::IsInitialized() const {
  return true;
}

void RouteChatRequest::InternalSwap(RouteChatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.route_note_, other->_impl_.route_note_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteChatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[6]);
}
// ===================================================================

class RouteChatResponse::_Internal {
 public:
  static const ::route_guide::v1::RouteNote& route_note(const RouteChatResponse* msg);
};

const ::route_guide::v1::RouteNote&
RouteChatResponse::_Internal::route_note(const RouteChatResponse* msg) {
  return *msg->_impl_.route_note_;
}
RouteChatResponse::RouteChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RouteChatResponse)
}
RouteChatResponse::RouteChatResponse(const RouteChatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteChatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_note_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_route_note()) {
    _this->_impl_.route_note_ = new ::route_guide::v1::RouteNote(*from._impl_.route_note_);
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RouteChatResponse)
}

inline void RouteChatResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.route_note_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteChatResponse::~RouteChatResponse() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RouteChatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteChatResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.route_note_;
}

void RouteChatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RouteChatResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.route_note_ != nullptr) {
    delete _impl_.route_note_;
  }
  _impl_.route_note_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteChatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_note(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RouteChatResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RouteChatResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  if (this->_internal_has_route_note()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::route_note(this),
        _Internal::route_note(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RouteChatResponse)
  return target;
}

::size_t RouteChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RouteChatResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  if (this->_internal_has_route_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.route_note_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteChatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteChatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteChatResponse::GetClassData() const { return &_class_data_; }


void RouteChatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteChatResponse*>(&to_msg);
  auto& from = static_cast<const RouteChatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RouteChatResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_route_note()) {
    _this->_internal_mutable_route_note()->::route_guide::v1::RouteNote::MergeFrom(
        from._internal_route_note());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteChatResponse::CopyFrom(const RouteChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RouteChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteChatResponse::IsInitialized() const {
  return true;
}

void RouteChatResponse::InternalSwap(RouteChatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.route_note_, other->_impl_.route_note_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteChatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[7]);
}
// ===================================================================

class Feature::_Internal {
 public:
  static const ::route_guide::v1::Point& location(const Feature* msg);
};

const ::route_guide::v1::Point&
Feature::_Internal::location(const Feature* msg) {
  return *msg->_impl_.location_;
}
Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Feature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::route_guide::v1::Point(*from._impl_.location_);
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.Feature)
}

inline void Feature::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:route_guide.v1.Feature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Feature::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void Feature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.Feature)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "route_guide.v1.Feature.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .route_guide.v1.Point location = 2 [json_name = "location"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Feature::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.Feature)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "route_guide.v1.Feature.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .route_guide.v1.Point location = 2 [json_name = "location"];
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.Feature)
  return target;
}

::size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.Feature)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .route_guide.v1.Point location = 2 [json_name = "location"];
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Feature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Feature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Feature::GetClassData() const { return &_class_data_; }


void Feature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Feature*>(&to_msg);
  auto& from = static_cast<const Feature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.Feature)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::route_guide::v1::Point::MergeFrom(
        from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.location_, other->_impl_.location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[8]);
}
// ===================================================================

class FeatureDatabase::_Internal {
 public:
};

FeatureDatabase::FeatureDatabase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.FeatureDatabase)
}
FeatureDatabase::FeatureDatabase(const FeatureDatabase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeatureDatabase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){from._impl_.feature_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.FeatureDatabase)
}

inline void FeatureDatabase::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeatureDatabase::~FeatureDatabase() {
  // @@protoc_insertion_point(destructor:route_guide.v1.FeatureDatabase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeatureDatabase::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_.~RepeatedPtrField();
}

void FeatureDatabase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeatureDatabase::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.FeatureDatabase)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureDatabase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .route_guide.v1.Feature feature = 1 [json_name = "feature"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FeatureDatabase::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.FeatureDatabase)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.FeatureDatabase)
  return target;
}

::size_t FeatureDatabase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.FeatureDatabase)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->_impl_.feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeatureDatabase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeatureDatabase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeatureDatabase::GetClassData() const { return &_class_data_; }


void FeatureDatabase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeatureDatabase*>(&to_msg);
  auto& from = static_cast<const FeatureDatabase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.FeatureDatabase)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feature_.MergeFrom(from._impl_.feature_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeatureDatabase::CopyFrom(const FeatureDatabase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.FeatureDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureDatabase::IsInitialized() const {
  return true;
}

void FeatureDatabase::InternalSwap(FeatureDatabase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feature_.InternalSwap(&other->_impl_.feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureDatabase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[9]);
}
// ===================================================================

class RouteNote::_Internal {
 public:
  static const ::route_guide::v1::Point& location(const RouteNote* msg);
};

const ::route_guide::v1::Point&
RouteNote::_Internal::location(const RouteNote* msg) {
  return *msg->_impl_.location_;
}
RouteNote::RouteNote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RouteNote)
}
RouteNote::RouteNote(const RouteNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteNote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::route_guide::v1::Point(*from._impl_.location_);
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RouteNote)
}

inline void RouteNote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouteNote::~RouteNote() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RouteNote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteNote::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void RouteNote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteNote::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RouteNote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteNote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Point location = 1 [json_name = "location"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "route_guide.v1.RouteNote.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RouteNote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RouteNote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Point location = 1 [json_name = "location"];
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "route_guide.v1.RouteNote.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RouteNote)
  return target;
}

::size_t RouteNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RouteNote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .route_guide.v1.Point location = 1 [json_name = "location"];
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteNote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteNote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteNote::GetClassData() const { return &_class_data_; }


void RouteNote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteNote*>(&to_msg);
  auto& from = static_cast<const RouteNote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RouteNote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::route_guide::v1::Point::MergeFrom(
        from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteNote::CopyFrom(const RouteNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RouteNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNote::IsInitialized() const {
  return true;
}

void RouteNote::InternalSwap(RouteNote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  swap(_impl_.location_, other->_impl_.location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteNote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[10]);
}
// ===================================================================

class RecordRouteResponse::_Internal {
 public:
};

RecordRouteResponse::RecordRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RecordRouteResponse)
}
RecordRouteResponse::RecordRouteResponse(const RecordRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RecordRouteResponse)
}

inline void RecordRouteResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.point_count_) { 0 }

    , decltype(_impl_.feature_count_) { 0 }

    , decltype(_impl_.distance_) { 0 }

    , decltype(_impl_.elapsed_time_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecordRouteResponse::~RecordRouteResponse() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RecordRouteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordRouteResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordRouteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RecordRouteResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.point_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.elapsed_time_) -
      reinterpret_cast<char*>(&_impl_.point_count_)) + sizeof(_impl_.elapsed_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRouteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 point_count = 1 [json_name = "pointCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.point_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 feature_count = 2 [json_name = "featureCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.feature_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 distance = 3 [json_name = "distance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 elapsed_time = 4 [json_name = "elapsedTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RecordRouteResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RecordRouteResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 point_count = 1 [json_name = "pointCount"];
  if (this->_internal_point_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_point_count(), target);
  }

  // int32 feature_count = 2 [json_name = "featureCount"];
  if (this->_internal_feature_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_feature_count(), target);
  }

  // int32 distance = 3 [json_name = "distance"];
  if (this->_internal_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_distance(), target);
  }

  // int32 elapsed_time = 4 [json_name = "elapsedTime"];
  if (this->_internal_elapsed_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_elapsed_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RecordRouteResponse)
  return target;
}

::size_t RecordRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RecordRouteResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 point_count = 1 [json_name = "pointCount"];
  if (this->_internal_point_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_point_count());
  }

  // int32 feature_count = 2 [json_name = "featureCount"];
  if (this->_internal_feature_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_feature_count());
  }

  // int32 distance = 3 [json_name = "distance"];
  if (this->_internal_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_distance());
  }

  // int32 elapsed_time = 4 [json_name = "elapsedTime"];
  if (this->_internal_elapsed_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_elapsed_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordRouteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordRouteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordRouteResponse::GetClassData() const { return &_class_data_; }


void RecordRouteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordRouteResponse*>(&to_msg);
  auto& from = static_cast<const RecordRouteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RecordRouteResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_point_count() != 0) {
    _this->_internal_set_point_count(from._internal_point_count());
  }
  if (from._internal_feature_count() != 0) {
    _this->_internal_set_feature_count(from._internal_feature_count());
  }
  if (from._internal_distance() != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  if (from._internal_elapsed_time() != 0) {
    _this->_internal_set_elapsed_time(from._internal_elapsed_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordRouteResponse::CopyFrom(const RecordRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RecordRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRouteResponse::IsInitialized() const {
  return true;
}

void RecordRouteResponse::InternalSwap(RecordRouteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordRouteResponse, _impl_.elapsed_time_)
      + sizeof(RecordRouteResponse::_impl_.elapsed_time_)
      - PROTOBUF_FIELD_OFFSET(RecordRouteResponse, _impl_.point_count_)>(
          reinterpret_cast<char*>(&_impl_.point_count_),
          reinterpret_cast<char*>(&other->_impl_.point_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRouteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2fv1_2froute_5fguide_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace route_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::route_guide::v1::Point*
Arena::CreateMaybeMessage< ::route_guide::v1::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::ListFeaturesRequest*
Arena::CreateMaybeMessage< ::route_guide::v1::ListFeaturesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::ListFeaturesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::GetFeatureResponse*
Arena::CreateMaybeMessage< ::route_guide::v1::GetFeatureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::GetFeatureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::GetFeatureRequest*
Arena::CreateMaybeMessage< ::route_guide::v1::GetFeatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::GetFeatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::ListFeaturesResponse*
Arena::CreateMaybeMessage< ::route_guide::v1::ListFeaturesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::ListFeaturesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RecordRouteRequest*
Arena::CreateMaybeMessage< ::route_guide::v1::RecordRouteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RecordRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RouteChatRequest*
Arena::CreateMaybeMessage< ::route_guide::v1::RouteChatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RouteChatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RouteChatResponse*
Arena::CreateMaybeMessage< ::route_guide::v1::RouteChatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RouteChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::Feature*
Arena::CreateMaybeMessage< ::route_guide::v1::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::FeatureDatabase*
Arena::CreateMaybeMessage< ::route_guide::v1::FeatureDatabase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::FeatureDatabase >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RouteNote*
Arena::CreateMaybeMessage< ::route_guide::v1::RouteNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RouteNote >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RecordRouteResponse*
Arena::CreateMaybeMessage< ::route_guide::v1::RecordRouteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RecordRouteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
