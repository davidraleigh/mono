// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/route_guide/v1/route_guide.proto

#include "proto/route_guide/v1/route_guide.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace route_guide {
namespace v1 {
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0)
  , longitude_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr ListFeaturesRequest::ListFeaturesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lo_(nullptr)
  , hi_(nullptr){}
struct ListFeaturesRequestDefaultTypeInternal {
  constexpr ListFeaturesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListFeaturesRequestDefaultTypeInternal() {}
  union {
    ListFeaturesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListFeaturesRequestDefaultTypeInternal _ListFeaturesRequest_default_instance_;
constexpr GetFeatureResponse::GetFeatureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_(nullptr){}
struct GetFeatureResponseDefaultTypeInternal {
  constexpr GetFeatureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFeatureResponseDefaultTypeInternal() {}
  union {
    GetFeatureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFeatureResponseDefaultTypeInternal _GetFeatureResponse_default_instance_;
constexpr GetFeatureRequest::GetFeatureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_(nullptr){}
struct GetFeatureRequestDefaultTypeInternal {
  constexpr GetFeatureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFeatureRequestDefaultTypeInternal() {}
  union {
    GetFeatureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFeatureRequestDefaultTypeInternal _GetFeatureRequest_default_instance_;
constexpr ListFeaturesResponse::ListFeaturesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_(nullptr){}
struct ListFeaturesResponseDefaultTypeInternal {
  constexpr ListFeaturesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListFeaturesResponseDefaultTypeInternal() {}
  union {
    ListFeaturesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListFeaturesResponseDefaultTypeInternal _ListFeaturesResponse_default_instance_;
constexpr RecordRouteRequest::RecordRouteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_(nullptr){}
struct RecordRouteRequestDefaultTypeInternal {
  constexpr RecordRouteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordRouteRequestDefaultTypeInternal() {}
  union {
    RecordRouteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordRouteRequestDefaultTypeInternal _RecordRouteRequest_default_instance_;
constexpr RouteChatRequest::RouteChatRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : route_note_(nullptr){}
struct RouteChatRequestDefaultTypeInternal {
  constexpr RouteChatRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteChatRequestDefaultTypeInternal() {}
  union {
    RouteChatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteChatRequestDefaultTypeInternal _RouteChatRequest_default_instance_;
constexpr RouteChatResponse::RouteChatResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : route_note_(nullptr){}
struct RouteChatResponseDefaultTypeInternal {
  constexpr RouteChatResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteChatResponseDefaultTypeInternal() {}
  union {
    RouteChatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteChatResponseDefaultTypeInternal _RouteChatResponse_default_instance_;
constexpr Feature::Feature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(nullptr){}
struct FeatureDefaultTypeInternal {
  constexpr FeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeatureDefaultTypeInternal _Feature_default_instance_;
constexpr FeatureDatabase::FeatureDatabase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_(){}
struct FeatureDatabaseDefaultTypeInternal {
  constexpr FeatureDatabaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeatureDatabaseDefaultTypeInternal() {}
  union {
    FeatureDatabase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeatureDatabaseDefaultTypeInternal _FeatureDatabase_default_instance_;
constexpr RouteNote::RouteNote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(nullptr){}
struct RouteNoteDefaultTypeInternal {
  constexpr RouteNoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteNoteDefaultTypeInternal() {}
  union {
    RouteNote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteNoteDefaultTypeInternal _RouteNote_default_instance_;
constexpr RecordRouteResponse::RecordRouteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_count_(0)
  , feature_count_(0)
  , distance_(0)
  , elapsed_time_(0){}
struct RecordRouteResponseDefaultTypeInternal {
  constexpr RecordRouteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordRouteResponseDefaultTypeInternal() {}
  union {
    RecordRouteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordRouteResponseDefaultTypeInternal _RecordRouteResponse_default_instance_;
}  // namespace v1
}  // namespace route_guide
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::Point, latitude_),
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::Point, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesRequest, lo_),
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesRequest, hi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::GetFeatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::GetFeatureResponse, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::GetFeatureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::GetFeatureRequest, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::ListFeaturesResponse, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteRequest, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteChatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteChatRequest, route_note_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteChatResponse, route_note_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::Feature, name_),
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::Feature, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::FeatureDatabase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::FeatureDatabase, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteNote, location_),
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RouteNote, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, point_count_),
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, feature_count_),
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, distance_),
  PROTOBUF_FIELD_OFFSET(::route_guide::v1::RecordRouteResponse, elapsed_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::route_guide::v1::Point)},
  { 8, -1, -1, sizeof(::route_guide::v1::ListFeaturesRequest)},
  { 16, -1, -1, sizeof(::route_guide::v1::GetFeatureResponse)},
  { 23, -1, -1, sizeof(::route_guide::v1::GetFeatureRequest)},
  { 30, -1, -1, sizeof(::route_guide::v1::ListFeaturesResponse)},
  { 37, -1, -1, sizeof(::route_guide::v1::RecordRouteRequest)},
  { 44, -1, -1, sizeof(::route_guide::v1::RouteChatRequest)},
  { 51, -1, -1, sizeof(::route_guide::v1::RouteChatResponse)},
  { 58, -1, -1, sizeof(::route_guide::v1::Feature)},
  { 66, -1, -1, sizeof(::route_guide::v1::FeatureDatabase)},
  { 73, -1, -1, sizeof(::route_guide::v1::RouteNote)},
  { 81, -1, -1, sizeof(::route_guide::v1::RecordRouteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_ListFeaturesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_GetFeatureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_GetFeatureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_ListFeaturesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_RecordRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_RouteChatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_RouteChatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_Feature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_FeatureDatabase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_RouteNote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::route_guide::v1::_RecordRouteResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&proto/route_guide/v1/route_guide.proto"
  "\022\016route_guide.v1\"A\n\005Point\022\032\n\010latitude\030\001 "
  "\001(\005R\010latitude\022\034\n\tlongitude\030\002 \001(\005R\tlongit"
  "ude\"c\n\023ListFeaturesRequest\022%\n\002lo\030\001 \001(\0132\025"
  ".route_guide.v1.PointR\002lo\022%\n\002hi\030\002 \001(\0132\025."
  "route_guide.v1.PointR\002hi\"G\n\022GetFeatureRe"
  "sponse\0221\n\007feature\030\001 \001(\0132\027.route_guide.v1"
  ".FeatureR\007feature\"@\n\021GetFeatureRequest\022+"
  "\n\005point\030\001 \001(\0132\025.route_guide.v1.PointR\005po"
  "int\"I\n\024ListFeaturesResponse\0221\n\007feature\030\001"
  " \001(\0132\027.route_guide.v1.FeatureR\007feature\"A"
  "\n\022RecordRouteRequest\022+\n\005point\030\001 \001(\0132\025.ro"
  "ute_guide.v1.PointR\005point\"L\n\020RouteChatRe"
  "quest\0228\n\nroute_note\030\001 \001(\0132\031.route_guide."
  "v1.RouteNoteR\trouteNote\"M\n\021RouteChatResp"
  "onse\0228\n\nroute_note\030\001 \001(\0132\031.route_guide.v"
  "1.RouteNoteR\trouteNote\"P\n\007Feature\022\022\n\004nam"
  "e\030\001 \001(\tR\004name\0221\n\010location\030\002 \001(\0132\025.route_"
  "guide.v1.PointR\010location\"D\n\017FeatureDatab"
  "ase\0221\n\007feature\030\001 \003(\0132\027.route_guide.v1.Fe"
  "atureR\007feature\"X\n\tRouteNote\0221\n\010location\030"
  "\001 \001(\0132\025.route_guide.v1.PointR\010location\022\030"
  "\n\007message\030\002 \001(\tR\007message\"\232\001\n\023RecordRoute"
  "Response\022\037\n\013point_count\030\001 \001(\005R\npointCoun"
  "t\022#\n\rfeature_count\030\002 \001(\005R\014featureCount\022\032"
  "\n\010distance\030\003 \001(\005R\010distance\022!\n\014elapsed_ti"
  "me\030\004 \001(\005R\013elapsedTime2\375\002\n\021RouteGuideServ"
  "ice\022U\n\nGetFeature\022!.route_guide.v1.GetFe"
  "atureRequest\032\".route_guide.v1.GetFeature"
  "Response\"\000\022]\n\014ListFeatures\022#.route_guide"
  ".v1.ListFeaturesRequest\032$.route_guide.v1"
  ".ListFeaturesResponse\"\0000\001\022Z\n\013RecordRoute"
  "\022\".route_guide.v1.RecordRouteRequest\032#.r"
  "oute_guide.v1.RecordRouteResponse\"\000(\001\022V\n"
  "\tRouteChat\022 .route_guide.v1.RouteChatReq"
  "uest\032!.route_guide.v1.RouteChatResponse\""
  "\000(\0010\001B~\n\026io.grpc.route_guide.v1B\017RouteGu"
  "ideProtoP\001Z2github.com/davidraleigh/mono"
  "/golang/route_guide/v1\242\002\003RTG\252\002\026io.grpc.r"
  "oute_guide.v1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto = {
  false, false, 1581, descriptor_table_protodef_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto, "proto/route_guide/v1/route_guide.proto",
  &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto::offsets,
  file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto, file_level_enum_descriptors_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto, file_level_service_descriptors_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter() {
  return &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto(&descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto);
namespace route_guide {
namespace v1 {

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.Point)
}

void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:route_guide.v1.Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 latitude = 1 [json_name = "latitude"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 longitude = 2 [json_name = "longitude"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 latitude = 1 [json_name = "latitude"];
  if (this->_internal_latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_latitude(), target);
  }

  // int32 longitude = 2 [json_name = "longitude"];
  if (this->_internal_longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 latitude = 1 [json_name = "latitude"];
  if (this->_internal_latitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_latitude());
  }

  // int32 longitude = 2 [json_name = "longitude"];
  if (this->_internal_longitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_longitude());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.Point)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_latitude() != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_longitude() != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, longitude_)
      + sizeof(Point::longitude_)
      - PROTOBUF_FIELD_OFFSET(Point, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[0]);
}

// ===================================================================

class ListFeaturesRequest::_Internal {
 public:
  static const ::route_guide::v1::Point& lo(const ListFeaturesRequest* msg);
  static const ::route_guide::v1::Point& hi(const ListFeaturesRequest* msg);
};

const ::route_guide::v1::Point&
ListFeaturesRequest::_Internal::lo(const ListFeaturesRequest* msg) {
  return *msg->lo_;
}
const ::route_guide::v1::Point&
ListFeaturesRequest::_Internal::hi(const ListFeaturesRequest* msg) {
  return *msg->hi_;
}
ListFeaturesRequest::ListFeaturesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.ListFeaturesRequest)
}
ListFeaturesRequest::ListFeaturesRequest(const ListFeaturesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lo()) {
    lo_ = new ::route_guide::v1::Point(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  if (from._internal_has_hi()) {
    hi_ = new ::route_guide::v1::Point(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.ListFeaturesRequest)
}

void ListFeaturesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hi_) -
    reinterpret_cast<char*>(&lo_)) + sizeof(hi_));
}

ListFeaturesRequest::~ListFeaturesRequest() {
  // @@protoc_insertion_point(destructor:route_guide.v1.ListFeaturesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListFeaturesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lo_;
  if (this != internal_default_instance()) delete hi_;
}

void ListFeaturesRequest::ArenaDtor(void* object) {
  ListFeaturesRequest* _this = reinterpret_cast< ListFeaturesRequest* >(object);
  (void)_this;
}
void ListFeaturesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListFeaturesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListFeaturesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.ListFeaturesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListFeaturesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Point lo = 1 [json_name = "lo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .route_guide.v1.Point hi = 2 [json_name = "hi"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListFeaturesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.ListFeaturesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Point lo = 1 [json_name = "lo"];
  if (this->_internal_has_lo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lo(this), target, stream);
  }

  // .route_guide.v1.Point hi = 2 [json_name = "hi"];
  if (this->_internal_has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.ListFeaturesRequest)
  return target;
}

size_t ListFeaturesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.ListFeaturesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Point lo = 1 [json_name = "lo"];
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  // .route_guide.v1.Point hi = 2 [json_name = "hi"];
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListFeaturesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListFeaturesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListFeaturesRequest::GetClassData() const { return &_class_data_; }

void ListFeaturesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListFeaturesRequest *>(to)->MergeFrom(
      static_cast<const ListFeaturesRequest &>(from));
}


void ListFeaturesRequest::MergeFrom(const ListFeaturesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.ListFeaturesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lo()) {
    _internal_mutable_lo()->::route_guide::v1::Point::MergeFrom(from._internal_lo());
  }
  if (from._internal_has_hi()) {
    _internal_mutable_hi()->::route_guide::v1::Point::MergeFrom(from._internal_hi());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListFeaturesRequest::CopyFrom(const ListFeaturesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.ListFeaturesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFeaturesRequest::IsInitialized() const {
  return true;
}

void ListFeaturesRequest::InternalSwap(ListFeaturesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListFeaturesRequest, hi_)
      + sizeof(ListFeaturesRequest::hi_)
      - PROTOBUF_FIELD_OFFSET(ListFeaturesRequest, lo_)>(
          reinterpret_cast<char*>(&lo_),
          reinterpret_cast<char*>(&other->lo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFeaturesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[1]);
}

// ===================================================================

class GetFeatureResponse::_Internal {
 public:
  static const ::route_guide::v1::Feature& feature(const GetFeatureResponse* msg);
};

const ::route_guide::v1::Feature&
GetFeatureResponse::_Internal::feature(const GetFeatureResponse* msg) {
  return *msg->feature_;
}
GetFeatureResponse::GetFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.GetFeatureResponse)
}
GetFeatureResponse::GetFeatureResponse(const GetFeatureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_feature()) {
    feature_ = new ::route_guide::v1::Feature(*from.feature_);
  } else {
    feature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.GetFeatureResponse)
}

void GetFeatureResponse::SharedCtor() {
feature_ = nullptr;
}

GetFeatureResponse::~GetFeatureResponse() {
  // @@protoc_insertion_point(destructor:route_guide.v1.GetFeatureResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFeatureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete feature_;
}

void GetFeatureResponse::ArenaDtor(void* object) {
  GetFeatureResponse* _this = reinterpret_cast< GetFeatureResponse* >(object);
  (void)_this;
}
void GetFeatureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFeatureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFeatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.GetFeatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && feature_ != nullptr) {
    delete feature_;
  }
  feature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFeatureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeatureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.GetFeatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  if (this->_internal_has_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.GetFeatureResponse)
  return target;
}

size_t GetFeatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.GetFeatureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFeatureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFeatureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFeatureResponse::GetClassData() const { return &_class_data_; }

void GetFeatureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFeatureResponse *>(to)->MergeFrom(
      static_cast<const GetFeatureResponse &>(from));
}


void GetFeatureResponse::MergeFrom(const GetFeatureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.GetFeatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_feature()) {
    _internal_mutable_feature()->::route_guide::v1::Feature::MergeFrom(from._internal_feature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFeatureResponse::CopyFrom(const GetFeatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.GetFeatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeatureResponse::IsInitialized() const {
  return true;
}

void GetFeatureResponse::InternalSwap(GetFeatureResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(feature_, other->feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeatureResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[2]);
}

// ===================================================================

class GetFeatureRequest::_Internal {
 public:
  static const ::route_guide::v1::Point& point(const GetFeatureRequest* msg);
};

const ::route_guide::v1::Point&
GetFeatureRequest::_Internal::point(const GetFeatureRequest* msg) {
  return *msg->point_;
}
GetFeatureRequest::GetFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.GetFeatureRequest)
}
GetFeatureRequest::GetFeatureRequest(const GetFeatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::route_guide::v1::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.GetFeatureRequest)
}

void GetFeatureRequest::SharedCtor() {
point_ = nullptr;
}

GetFeatureRequest::~GetFeatureRequest() {
  // @@protoc_insertion_point(destructor:route_guide.v1.GetFeatureRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFeatureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete point_;
}

void GetFeatureRequest::ArenaDtor(void* object) {
  GetFeatureRequest* _this = reinterpret_cast< GetFeatureRequest* >(object);
  (void)_this;
}
void GetFeatureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFeatureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFeatureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.GetFeatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFeatureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Point point = 1 [json_name = "point"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeatureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.GetFeatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Point point = 1 [json_name = "point"];
  if (this->_internal_has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.GetFeatureRequest)
  return target;
}

size_t GetFeatureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.GetFeatureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Point point = 1 [json_name = "point"];
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFeatureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFeatureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFeatureRequest::GetClassData() const { return &_class_data_; }

void GetFeatureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFeatureRequest *>(to)->MergeFrom(
      static_cast<const GetFeatureRequest &>(from));
}


void GetFeatureRequest::MergeFrom(const GetFeatureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.GetFeatureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_point()) {
    _internal_mutable_point()->::route_guide::v1::Point::MergeFrom(from._internal_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFeatureRequest::CopyFrom(const GetFeatureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.GetFeatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeatureRequest::IsInitialized() const {
  return true;
}

void GetFeatureRequest::InternalSwap(GetFeatureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(point_, other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeatureRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[3]);
}

// ===================================================================

class ListFeaturesResponse::_Internal {
 public:
  static const ::route_guide::v1::Feature& feature(const ListFeaturesResponse* msg);
};

const ::route_guide::v1::Feature&
ListFeaturesResponse::_Internal::feature(const ListFeaturesResponse* msg) {
  return *msg->feature_;
}
ListFeaturesResponse::ListFeaturesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.ListFeaturesResponse)
}
ListFeaturesResponse::ListFeaturesResponse(const ListFeaturesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_feature()) {
    feature_ = new ::route_guide::v1::Feature(*from.feature_);
  } else {
    feature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.ListFeaturesResponse)
}

void ListFeaturesResponse::SharedCtor() {
feature_ = nullptr;
}

ListFeaturesResponse::~ListFeaturesResponse() {
  // @@protoc_insertion_point(destructor:route_guide.v1.ListFeaturesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListFeaturesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete feature_;
}

void ListFeaturesResponse::ArenaDtor(void* object) {
  ListFeaturesResponse* _this = reinterpret_cast< ListFeaturesResponse* >(object);
  (void)_this;
}
void ListFeaturesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListFeaturesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListFeaturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.ListFeaturesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && feature_ != nullptr) {
    delete feature_;
  }
  feature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListFeaturesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListFeaturesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.ListFeaturesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  if (this->_internal_has_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.ListFeaturesResponse)
  return target;
}

size_t ListFeaturesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.ListFeaturesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListFeaturesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListFeaturesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListFeaturesResponse::GetClassData() const { return &_class_data_; }

void ListFeaturesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListFeaturesResponse *>(to)->MergeFrom(
      static_cast<const ListFeaturesResponse &>(from));
}


void ListFeaturesResponse::MergeFrom(const ListFeaturesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.ListFeaturesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_feature()) {
    _internal_mutable_feature()->::route_guide::v1::Feature::MergeFrom(from._internal_feature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListFeaturesResponse::CopyFrom(const ListFeaturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.ListFeaturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFeaturesResponse::IsInitialized() const {
  return true;
}

void ListFeaturesResponse::InternalSwap(ListFeaturesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(feature_, other->feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFeaturesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[4]);
}

// ===================================================================

class RecordRouteRequest::_Internal {
 public:
  static const ::route_guide::v1::Point& point(const RecordRouteRequest* msg);
};

const ::route_guide::v1::Point&
RecordRouteRequest::_Internal::point(const RecordRouteRequest* msg) {
  return *msg->point_;
}
RecordRouteRequest::RecordRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RecordRouteRequest)
}
RecordRouteRequest::RecordRouteRequest(const RecordRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::route_guide::v1::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RecordRouteRequest)
}

void RecordRouteRequest::SharedCtor() {
point_ = nullptr;
}

RecordRouteRequest::~RecordRouteRequest() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RecordRouteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordRouteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete point_;
}

void RecordRouteRequest::ArenaDtor(void* object) {
  RecordRouteRequest* _this = reinterpret_cast< RecordRouteRequest* >(object);
  (void)_this;
}
void RecordRouteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RecordRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Point point = 1 [json_name = "point"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordRouteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RecordRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Point point = 1 [json_name = "point"];
  if (this->_internal_has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RecordRouteRequest)
  return target;
}

size_t RecordRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RecordRouteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.Point point = 1 [json_name = "point"];
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordRouteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordRouteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordRouteRequest::GetClassData() const { return &_class_data_; }

void RecordRouteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordRouteRequest *>(to)->MergeFrom(
      static_cast<const RecordRouteRequest &>(from));
}


void RecordRouteRequest::MergeFrom(const RecordRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RecordRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_point()) {
    _internal_mutable_point()->::route_guide::v1::Point::MergeFrom(from._internal_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordRouteRequest::CopyFrom(const RecordRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RecordRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRouteRequest::IsInitialized() const {
  return true;
}

void RecordRouteRequest::InternalSwap(RecordRouteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(point_, other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRouteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[5]);
}

// ===================================================================

class RouteChatRequest::_Internal {
 public:
  static const ::route_guide::v1::RouteNote& route_note(const RouteChatRequest* msg);
};

const ::route_guide::v1::RouteNote&
RouteChatRequest::_Internal::route_note(const RouteChatRequest* msg) {
  return *msg->route_note_;
}
RouteChatRequest::RouteChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RouteChatRequest)
}
RouteChatRequest::RouteChatRequest(const RouteChatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_route_note()) {
    route_note_ = new ::route_guide::v1::RouteNote(*from.route_note_);
  } else {
    route_note_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RouteChatRequest)
}

void RouteChatRequest::SharedCtor() {
route_note_ = nullptr;
}

RouteChatRequest::~RouteChatRequest() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RouteChatRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteChatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete route_note_;
}

void RouteChatRequest::ArenaDtor(void* object) {
  RouteChatRequest* _this = reinterpret_cast< RouteChatRequest* >(object);
  (void)_this;
}
void RouteChatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteChatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RouteChatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && route_note_ != nullptr) {
    delete route_note_;
  }
  route_note_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteChatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteChatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RouteChatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  if (this->_internal_has_route_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::route_note(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RouteChatRequest)
  return target;
}

size_t RouteChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RouteChatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  if (this->_internal_has_route_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_note_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteChatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteChatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteChatRequest::GetClassData() const { return &_class_data_; }

void RouteChatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteChatRequest *>(to)->MergeFrom(
      static_cast<const RouteChatRequest &>(from));
}


void RouteChatRequest::MergeFrom(const RouteChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RouteChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_route_note()) {
    _internal_mutable_route_note()->::route_guide::v1::RouteNote::MergeFrom(from._internal_route_note());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteChatRequest::CopyFrom(const RouteChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RouteChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteChatRequest::IsInitialized() const {
  return true;
}

void RouteChatRequest::InternalSwap(RouteChatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(route_note_, other->route_note_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteChatRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[6]);
}

// ===================================================================

class RouteChatResponse::_Internal {
 public:
  static const ::route_guide::v1::RouteNote& route_note(const RouteChatResponse* msg);
};

const ::route_guide::v1::RouteNote&
RouteChatResponse::_Internal::route_note(const RouteChatResponse* msg) {
  return *msg->route_note_;
}
RouteChatResponse::RouteChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RouteChatResponse)
}
RouteChatResponse::RouteChatResponse(const RouteChatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_route_note()) {
    route_note_ = new ::route_guide::v1::RouteNote(*from.route_note_);
  } else {
    route_note_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RouteChatResponse)
}

void RouteChatResponse::SharedCtor() {
route_note_ = nullptr;
}

RouteChatResponse::~RouteChatResponse() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RouteChatResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteChatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete route_note_;
}

void RouteChatResponse::ArenaDtor(void* object) {
  RouteChatResponse* _this = reinterpret_cast< RouteChatResponse* >(object);
  (void)_this;
}
void RouteChatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteChatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RouteChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && route_note_ != nullptr) {
    delete route_note_;
  }
  route_note_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteChatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteChatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RouteChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  if (this->_internal_has_route_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::route_note(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RouteChatResponse)
  return target;
}

size_t RouteChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RouteChatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  if (this->_internal_has_route_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_note_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteChatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteChatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteChatResponse::GetClassData() const { return &_class_data_; }

void RouteChatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteChatResponse *>(to)->MergeFrom(
      static_cast<const RouteChatResponse &>(from));
}


void RouteChatResponse::MergeFrom(const RouteChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RouteChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_route_note()) {
    _internal_mutable_route_note()->::route_guide::v1::RouteNote::MergeFrom(from._internal_route_note());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteChatResponse::CopyFrom(const RouteChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RouteChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteChatResponse::IsInitialized() const {
  return true;
}

void RouteChatResponse::InternalSwap(RouteChatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(route_note_, other->route_note_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteChatResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[7]);
}

// ===================================================================

class Feature::_Internal {
 public:
  static const ::route_guide::v1::Point& location(const Feature* msg);
};

const ::route_guide::v1::Point&
Feature::_Internal::location(const Feature* msg) {
  return *msg->location_;
}
Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(),
      GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    location_ = new ::route_guide::v1::Point(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.Feature)
}

void Feature::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
location_ = nullptr;
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:route_guide.v1.Feature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void Feature::ArenaDtor(void* object) {
  Feature* _this = reinterpret_cast< Feature* >(object);
  (void)_this;
}
void Feature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "route_guide.v1.Feature.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .route_guide.v1.Point location = 2 [json_name = "location"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "route_guide.v1.Feature.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .route_guide.v1.Point location = 2 [json_name = "location"];
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.Feature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .route_guide.v1.Point location = 2 [json_name = "location"];
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Feature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Feature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Feature::GetClassData() const { return &_class_data_; }

void Feature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Feature *>(to)->MergeFrom(
      static_cast<const Feature &>(from));
}


void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_location()) {
    _internal_mutable_location()->::route_guide::v1::Point::MergeFrom(from._internal_location());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[8]);
}

// ===================================================================

class FeatureDatabase::_Internal {
 public:
};

FeatureDatabase::FeatureDatabase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  feature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.FeatureDatabase)
}
FeatureDatabase::FeatureDatabase(const FeatureDatabase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.FeatureDatabase)
}

void FeatureDatabase::SharedCtor() {
}

FeatureDatabase::~FeatureDatabase() {
  // @@protoc_insertion_point(destructor:route_guide.v1.FeatureDatabase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FeatureDatabase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FeatureDatabase::ArenaDtor(void* object) {
  FeatureDatabase* _this = reinterpret_cast< FeatureDatabase* >(object);
  (void)_this;
}
void FeatureDatabase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureDatabase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeatureDatabase::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.FeatureDatabase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureDatabase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .route_guide.v1.Feature feature = 1 [json_name = "feature"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureDatabase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.FeatureDatabase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_feature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.FeatureDatabase)
  return target;
}

size_t FeatureDatabase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.FeatureDatabase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeatureDatabase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FeatureDatabase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeatureDatabase::GetClassData() const { return &_class_data_; }

void FeatureDatabase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FeatureDatabase *>(to)->MergeFrom(
      static_cast<const FeatureDatabase &>(from));
}


void FeatureDatabase::MergeFrom(const FeatureDatabase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.FeatureDatabase)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeatureDatabase::CopyFrom(const FeatureDatabase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.FeatureDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureDatabase::IsInitialized() const {
  return true;
}

void FeatureDatabase::InternalSwap(FeatureDatabase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureDatabase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[9]);
}

// ===================================================================

class RouteNote::_Internal {
 public:
  static const ::route_guide::v1::Point& location(const RouteNote* msg);
};

const ::route_guide::v1::Point&
RouteNote::_Internal::location(const RouteNote* msg) {
  return *msg->location_;
}
RouteNote::RouteNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RouteNote)
}
RouteNote::RouteNote(const RouteNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(),
      GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    location_ = new ::route_guide::v1::Point(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RouteNote)
}

void RouteNote::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
location_ = nullptr;
}

RouteNote::~RouteNote() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RouteNote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteNote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void RouteNote::ArenaDtor(void* object) {
  RouteNote* _this = reinterpret_cast< RouteNote* >(object);
  (void)_this;
}
void RouteNote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteNote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteNote::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RouteNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteNote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .route_guide.v1.Point location = 1 [json_name = "location"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "route_guide.v1.RouteNote.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteNote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RouteNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .route_guide.v1.Point location = 1 [json_name = "location"];
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "route_guide.v1.RouteNote.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RouteNote)
  return target;
}

size_t RouteNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RouteNote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .route_guide.v1.Point location = 1 [json_name = "location"];
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteNote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteNote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteNote::GetClassData() const { return &_class_data_; }

void RouteNote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteNote *>(to)->MergeFrom(
      static_cast<const RouteNote &>(from));
}


void RouteNote::MergeFrom(const RouteNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RouteNote)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_location()) {
    _internal_mutable_location()->::route_guide::v1::Point::MergeFrom(from._internal_location());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteNote::CopyFrom(const RouteNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RouteNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNote::IsInitialized() const {
  return true;
}

void RouteNote::InternalSwap(RouteNote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteNote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[10]);
}

// ===================================================================

class RecordRouteResponse::_Internal {
 public:
};

RecordRouteResponse::RecordRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:route_guide.v1.RecordRouteResponse)
}
RecordRouteResponse::RecordRouteResponse(const RecordRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&point_count_, &from.point_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&elapsed_time_) -
    reinterpret_cast<char*>(&point_count_)) + sizeof(elapsed_time_));
  // @@protoc_insertion_point(copy_constructor:route_guide.v1.RecordRouteResponse)
}

void RecordRouteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&point_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elapsed_time_) -
    reinterpret_cast<char*>(&point_count_)) + sizeof(elapsed_time_));
}

RecordRouteResponse::~RecordRouteResponse() {
  // @@protoc_insertion_point(destructor:route_guide.v1.RecordRouteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordRouteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordRouteResponse::ArenaDtor(void* object) {
  RecordRouteResponse* _this = reinterpret_cast< RecordRouteResponse* >(object);
  (void)_this;
}
void RecordRouteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:route_guide.v1.RecordRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&point_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elapsed_time_) -
      reinterpret_cast<char*>(&point_count_)) + sizeof(elapsed_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 point_count = 1 [json_name = "pointCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          point_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 feature_count = 2 [json_name = "featureCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          feature_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 distance = 3 [json_name = "distance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 elapsed_time = 4 [json_name = "elapsedTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordRouteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:route_guide.v1.RecordRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 point_count = 1 [json_name = "pointCount"];
  if (this->_internal_point_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_point_count(), target);
  }

  // int32 feature_count = 2 [json_name = "featureCount"];
  if (this->_internal_feature_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_feature_count(), target);
  }

  // int32 distance = 3 [json_name = "distance"];
  if (this->_internal_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_distance(), target);
  }

  // int32 elapsed_time = 4 [json_name = "elapsedTime"];
  if (this->_internal_elapsed_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_elapsed_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:route_guide.v1.RecordRouteResponse)
  return target;
}

size_t RecordRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:route_guide.v1.RecordRouteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 point_count = 1 [json_name = "pointCount"];
  if (this->_internal_point_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_point_count());
  }

  // int32 feature_count = 2 [json_name = "featureCount"];
  if (this->_internal_feature_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_feature_count());
  }

  // int32 distance = 3 [json_name = "distance"];
  if (this->_internal_distance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_distance());
  }

  // int32 elapsed_time = 4 [json_name = "elapsedTime"];
  if (this->_internal_elapsed_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_elapsed_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordRouteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordRouteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordRouteResponse::GetClassData() const { return &_class_data_; }

void RecordRouteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordRouteResponse *>(to)->MergeFrom(
      static_cast<const RecordRouteResponse &>(from));
}


void RecordRouteResponse::MergeFrom(const RecordRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:route_guide.v1.RecordRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_point_count() != 0) {
    _internal_set_point_count(from._internal_point_count());
  }
  if (from._internal_feature_count() != 0) {
    _internal_set_feature_count(from._internal_feature_count());
  }
  if (from._internal_distance() != 0) {
    _internal_set_distance(from._internal_distance());
  }
  if (from._internal_elapsed_time() != 0) {
    _internal_set_elapsed_time(from._internal_elapsed_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordRouteResponse::CopyFrom(const RecordRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:route_guide.v1.RecordRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRouteResponse::IsInitialized() const {
  return true;
}

void RecordRouteResponse::InternalSwap(RecordRouteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordRouteResponse, elapsed_time_)
      + sizeof(RecordRouteResponse::elapsed_time_)
      - PROTOBUF_FIELD_OFFSET(RecordRouteResponse, point_count_)>(
          reinterpret_cast<char*>(&point_count_),
          reinterpret_cast<char*>(&other->point_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRouteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_getter, &descriptor_table_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto_once,
      file_level_metadata_proto_2froute_5fguide_2fv1_2froute_5fguide_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace route_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::route_guide::v1::Point* Arena::CreateMaybeMessage< ::route_guide::v1::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::ListFeaturesRequest* Arena::CreateMaybeMessage< ::route_guide::v1::ListFeaturesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::ListFeaturesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::GetFeatureResponse* Arena::CreateMaybeMessage< ::route_guide::v1::GetFeatureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::GetFeatureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::GetFeatureRequest* Arena::CreateMaybeMessage< ::route_guide::v1::GetFeatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::GetFeatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::ListFeaturesResponse* Arena::CreateMaybeMessage< ::route_guide::v1::ListFeaturesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::ListFeaturesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RecordRouteRequest* Arena::CreateMaybeMessage< ::route_guide::v1::RecordRouteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RecordRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RouteChatRequest* Arena::CreateMaybeMessage< ::route_guide::v1::RouteChatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RouteChatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RouteChatResponse* Arena::CreateMaybeMessage< ::route_guide::v1::RouteChatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RouteChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::Feature* Arena::CreateMaybeMessage< ::route_guide::v1::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::FeatureDatabase* Arena::CreateMaybeMessage< ::route_guide::v1::FeatureDatabase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::FeatureDatabase >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RouteNote* Arena::CreateMaybeMessage< ::route_guide::v1::RouteNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RouteNote >(arena);
}
template<> PROTOBUF_NOINLINE ::route_guide::v1::RecordRouteResponse* Arena::CreateMaybeMessage< ::route_guide::v1::RecordRouteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::route_guide::v1::RecordRouteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
