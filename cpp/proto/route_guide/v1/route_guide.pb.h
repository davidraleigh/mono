// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route_guide/v1/route_guide.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_route_5fguide_2fv1_2froute_5fguide_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_route_5fguide_2fv1_2froute_5fguide_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_route_5fguide_2fv1_2froute_5fguide_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_route_5fguide_2fv1_2froute_5fguide_2eproto;
namespace route_guide {
namespace v1 {
class Feature;
struct FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class FeatureDatabase;
struct FeatureDatabaseDefaultTypeInternal;
extern FeatureDatabaseDefaultTypeInternal _FeatureDatabase_default_instance_;
class GetFeatureRequest;
struct GetFeatureRequestDefaultTypeInternal;
extern GetFeatureRequestDefaultTypeInternal _GetFeatureRequest_default_instance_;
class GetFeatureResponse;
struct GetFeatureResponseDefaultTypeInternal;
extern GetFeatureResponseDefaultTypeInternal _GetFeatureResponse_default_instance_;
class ListFeaturesRequest;
struct ListFeaturesRequestDefaultTypeInternal;
extern ListFeaturesRequestDefaultTypeInternal _ListFeaturesRequest_default_instance_;
class ListFeaturesResponse;
struct ListFeaturesResponseDefaultTypeInternal;
extern ListFeaturesResponseDefaultTypeInternal _ListFeaturesResponse_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RecordRouteRequest;
struct RecordRouteRequestDefaultTypeInternal;
extern RecordRouteRequestDefaultTypeInternal _RecordRouteRequest_default_instance_;
class RecordRouteResponse;
struct RecordRouteResponseDefaultTypeInternal;
extern RecordRouteResponseDefaultTypeInternal _RecordRouteResponse_default_instance_;
class RouteChatRequest;
struct RouteChatRequestDefaultTypeInternal;
extern RouteChatRequestDefaultTypeInternal _RouteChatRequest_default_instance_;
class RouteChatResponse;
struct RouteChatResponseDefaultTypeInternal;
extern RouteChatResponseDefaultTypeInternal _RouteChatResponse_default_instance_;
class RouteNote;
struct RouteNoteDefaultTypeInternal;
extern RouteNoteDefaultTypeInternal _RouteNote_default_instance_;
}  // namespace v1
}  // namespace route_guide
PROTOBUF_NAMESPACE_OPEN
template<> ::route_guide::v1::Feature* Arena::CreateMaybeMessage<::route_guide::v1::Feature>(Arena*);
template<> ::route_guide::v1::FeatureDatabase* Arena::CreateMaybeMessage<::route_guide::v1::FeatureDatabase>(Arena*);
template<> ::route_guide::v1::GetFeatureRequest* Arena::CreateMaybeMessage<::route_guide::v1::GetFeatureRequest>(Arena*);
template<> ::route_guide::v1::GetFeatureResponse* Arena::CreateMaybeMessage<::route_guide::v1::GetFeatureResponse>(Arena*);
template<> ::route_guide::v1::ListFeaturesRequest* Arena::CreateMaybeMessage<::route_guide::v1::ListFeaturesRequest>(Arena*);
template<> ::route_guide::v1::ListFeaturesResponse* Arena::CreateMaybeMessage<::route_guide::v1::ListFeaturesResponse>(Arena*);
template<> ::route_guide::v1::Point* Arena::CreateMaybeMessage<::route_guide::v1::Point>(Arena*);
template<> ::route_guide::v1::RecordRouteRequest* Arena::CreateMaybeMessage<::route_guide::v1::RecordRouteRequest>(Arena*);
template<> ::route_guide::v1::RecordRouteResponse* Arena::CreateMaybeMessage<::route_guide::v1::RecordRouteResponse>(Arena*);
template<> ::route_guide::v1::RouteChatRequest* Arena::CreateMaybeMessage<::route_guide::v1::RouteChatRequest>(Arena*);
template<> ::route_guide::v1::RouteChatResponse* Arena::CreateMaybeMessage<::route_guide::v1::RouteChatResponse>(Arena*);
template<> ::route_guide::v1::RouteNote* Arena::CreateMaybeMessage<::route_guide::v1::RouteNote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace route_guide {
namespace v1 {

// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // int32 latitude = 1 [json_name = "latitude"];
  void clear_latitude();
  int32_t latitude() const;
  void set_latitude(int32_t value);
  private:
  int32_t _internal_latitude() const;
  void _internal_set_latitude(int32_t value);
  public:

  // int32 longitude = 2 [json_name = "longitude"];
  void clear_longitude();
  int32_t longitude() const;
  void set_longitude(int32_t value);
  private:
  int32_t _internal_longitude() const;
  void _internal_set_longitude(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:route_guide.v1.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t latitude_;
    int32_t longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class ListFeaturesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.ListFeaturesRequest) */ {
 public:
  inline ListFeaturesRequest() : ListFeaturesRequest(nullptr) {}
  ~ListFeaturesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListFeaturesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFeaturesRequest(const ListFeaturesRequest& from);
  ListFeaturesRequest(ListFeaturesRequest&& from) noexcept
    : ListFeaturesRequest() {
    *this = ::std::move(from);
  }

  inline ListFeaturesRequest& operator=(const ListFeaturesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFeaturesRequest& operator=(ListFeaturesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListFeaturesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFeaturesRequest* internal_default_instance() {
    return reinterpret_cast<const ListFeaturesRequest*>(
               &_ListFeaturesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListFeaturesRequest& a, ListFeaturesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFeaturesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFeaturesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListFeaturesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListFeaturesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListFeaturesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListFeaturesRequest& from) {
    ListFeaturesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFeaturesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.ListFeaturesRequest";
  }
  protected:
  explicit ListFeaturesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoFieldNumber = 1,
    kHiFieldNumber = 2,
  };
  // .route_guide.v1.Point lo = 1 [json_name = "lo"];
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  const ::route_guide::v1::Point& lo() const;
  PROTOBUF_NODISCARD ::route_guide::v1::Point* release_lo();
  ::route_guide::v1::Point* mutable_lo();
  void set_allocated_lo(::route_guide::v1::Point* lo);
  private:
  const ::route_guide::v1::Point& _internal_lo() const;
  ::route_guide::v1::Point* _internal_mutable_lo();
  public:
  void unsafe_arena_set_allocated_lo(
      ::route_guide::v1::Point* lo);
  ::route_guide::v1::Point* unsafe_arena_release_lo();

  // .route_guide.v1.Point hi = 2 [json_name = "hi"];
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  const ::route_guide::v1::Point& hi() const;
  PROTOBUF_NODISCARD ::route_guide::v1::Point* release_hi();
  ::route_guide::v1::Point* mutable_hi();
  void set_allocated_hi(::route_guide::v1::Point* hi);
  private:
  const ::route_guide::v1::Point& _internal_hi() const;
  ::route_guide::v1::Point* _internal_mutable_hi();
  public:
  void unsafe_arena_set_allocated_hi(
      ::route_guide::v1::Point* hi);
  ::route_guide::v1::Point* unsafe_arena_release_hi();

  // @@protoc_insertion_point(class_scope:route_guide.v1.ListFeaturesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::route_guide::v1::Point* lo_;
    ::route_guide::v1::Point* hi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class GetFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.GetFeatureResponse) */ {
 public:
  inline GetFeatureResponse() : GetFeatureResponse(nullptr) {}
  ~GetFeatureResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFeatureResponse(const GetFeatureResponse& from);
  GetFeatureResponse(GetFeatureResponse&& from) noexcept
    : GetFeatureResponse() {
    *this = ::std::move(from);
  }

  inline GetFeatureResponse& operator=(const GetFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeatureResponse& operator=(GetFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const GetFeatureResponse*>(
               &_GetFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetFeatureResponse& a, GetFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFeatureResponse& from) {
    GetFeatureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.GetFeatureResponse";
  }
  protected:
  explicit GetFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
  };
  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  bool has_feature() const;
  private:
  bool _internal_has_feature() const;
  public:
  void clear_feature();
  const ::route_guide::v1::Feature& feature() const;
  PROTOBUF_NODISCARD ::route_guide::v1::Feature* release_feature();
  ::route_guide::v1::Feature* mutable_feature();
  void set_allocated_feature(::route_guide::v1::Feature* feature);
  private:
  const ::route_guide::v1::Feature& _internal_feature() const;
  ::route_guide::v1::Feature* _internal_mutable_feature();
  public:
  void unsafe_arena_set_allocated_feature(
      ::route_guide::v1::Feature* feature);
  ::route_guide::v1::Feature* unsafe_arena_release_feature();

  // @@protoc_insertion_point(class_scope:route_guide.v1.GetFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::route_guide::v1::Feature* feature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class GetFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.GetFeatureRequest) */ {
 public:
  inline GetFeatureRequest() : GetFeatureRequest(nullptr) {}
  ~GetFeatureRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFeatureRequest(const GetFeatureRequest& from);
  GetFeatureRequest(GetFeatureRequest&& from) noexcept
    : GetFeatureRequest() {
    *this = ::std::move(from);
  }

  inline GetFeatureRequest& operator=(const GetFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeatureRequest& operator=(GetFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const GetFeatureRequest*>(
               &_GetFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetFeatureRequest& a, GetFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFeatureRequest& from) {
    GetFeatureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.GetFeatureRequest";
  }
  protected:
  explicit GetFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // .route_guide.v1.Point point = 1 [json_name = "point"];
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::route_guide::v1::Point& point() const;
  PROTOBUF_NODISCARD ::route_guide::v1::Point* release_point();
  ::route_guide::v1::Point* mutable_point();
  void set_allocated_point(::route_guide::v1::Point* point);
  private:
  const ::route_guide::v1::Point& _internal_point() const;
  ::route_guide::v1::Point* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::route_guide::v1::Point* point);
  ::route_guide::v1::Point* unsafe_arena_release_point();

  // @@protoc_insertion_point(class_scope:route_guide.v1.GetFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::route_guide::v1::Point* point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class ListFeaturesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.ListFeaturesResponse) */ {
 public:
  inline ListFeaturesResponse() : ListFeaturesResponse(nullptr) {}
  ~ListFeaturesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListFeaturesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFeaturesResponse(const ListFeaturesResponse& from);
  ListFeaturesResponse(ListFeaturesResponse&& from) noexcept
    : ListFeaturesResponse() {
    *this = ::std::move(from);
  }

  inline ListFeaturesResponse& operator=(const ListFeaturesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFeaturesResponse& operator=(ListFeaturesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListFeaturesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFeaturesResponse* internal_default_instance() {
    return reinterpret_cast<const ListFeaturesResponse*>(
               &_ListFeaturesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListFeaturesResponse& a, ListFeaturesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFeaturesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFeaturesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListFeaturesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListFeaturesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListFeaturesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListFeaturesResponse& from) {
    ListFeaturesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFeaturesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.ListFeaturesResponse";
  }
  protected:
  explicit ListFeaturesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
  };
  // .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  bool has_feature() const;
  private:
  bool _internal_has_feature() const;
  public:
  void clear_feature();
  const ::route_guide::v1::Feature& feature() const;
  PROTOBUF_NODISCARD ::route_guide::v1::Feature* release_feature();
  ::route_guide::v1::Feature* mutable_feature();
  void set_allocated_feature(::route_guide::v1::Feature* feature);
  private:
  const ::route_guide::v1::Feature& _internal_feature() const;
  ::route_guide::v1::Feature* _internal_mutable_feature();
  public:
  void unsafe_arena_set_allocated_feature(
      ::route_guide::v1::Feature* feature);
  ::route_guide::v1::Feature* unsafe_arena_release_feature();

  // @@protoc_insertion_point(class_scope:route_guide.v1.ListFeaturesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::route_guide::v1::Feature* feature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class RecordRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.RecordRouteRequest) */ {
 public:
  inline RecordRouteRequest() : RecordRouteRequest(nullptr) {}
  ~RecordRouteRequest() override;
  explicit PROTOBUF_CONSTEXPR RecordRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordRouteRequest(const RecordRouteRequest& from);
  RecordRouteRequest(RecordRouteRequest&& from) noexcept
    : RecordRouteRequest() {
    *this = ::std::move(from);
  }

  inline RecordRouteRequest& operator=(const RecordRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRouteRequest& operator=(RecordRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordRouteRequest* internal_default_instance() {
    return reinterpret_cast<const RecordRouteRequest*>(
               &_RecordRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RecordRouteRequest& a, RecordRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordRouteRequest& from) {
    RecordRouteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.RecordRouteRequest";
  }
  protected:
  explicit RecordRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // .route_guide.v1.Point point = 1 [json_name = "point"];
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::route_guide::v1::Point& point() const;
  PROTOBUF_NODISCARD ::route_guide::v1::Point* release_point();
  ::route_guide::v1::Point* mutable_point();
  void set_allocated_point(::route_guide::v1::Point* point);
  private:
  const ::route_guide::v1::Point& _internal_point() const;
  ::route_guide::v1::Point* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::route_guide::v1::Point* point);
  ::route_guide::v1::Point* unsafe_arena_release_point();

  // @@protoc_insertion_point(class_scope:route_guide.v1.RecordRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::route_guide::v1::Point* point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class RouteChatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.RouteChatRequest) */ {
 public:
  inline RouteChatRequest() : RouteChatRequest(nullptr) {}
  ~RouteChatRequest() override;
  explicit PROTOBUF_CONSTEXPR RouteChatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteChatRequest(const RouteChatRequest& from);
  RouteChatRequest(RouteChatRequest&& from) noexcept
    : RouteChatRequest() {
    *this = ::std::move(from);
  }

  inline RouteChatRequest& operator=(const RouteChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteChatRequest& operator=(RouteChatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteChatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteChatRequest* internal_default_instance() {
    return reinterpret_cast<const RouteChatRequest*>(
               &_RouteChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RouteChatRequest& a, RouteChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteChatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteChatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteChatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteChatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteChatRequest& from) {
    RouteChatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteChatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.RouteChatRequest";
  }
  protected:
  explicit RouteChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteNoteFieldNumber = 1,
  };
  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  bool has_route_note() const;
  private:
  bool _internal_has_route_note() const;
  public:
  void clear_route_note();
  const ::route_guide::v1::RouteNote& route_note() const;
  PROTOBUF_NODISCARD ::route_guide::v1::RouteNote* release_route_note();
  ::route_guide::v1::RouteNote* mutable_route_note();
  void set_allocated_route_note(::route_guide::v1::RouteNote* route_note);
  private:
  const ::route_guide::v1::RouteNote& _internal_route_note() const;
  ::route_guide::v1::RouteNote* _internal_mutable_route_note();
  public:
  void unsafe_arena_set_allocated_route_note(
      ::route_guide::v1::RouteNote* route_note);
  ::route_guide::v1::RouteNote* unsafe_arena_release_route_note();

  // @@protoc_insertion_point(class_scope:route_guide.v1.RouteChatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::route_guide::v1::RouteNote* route_note_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class RouteChatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.RouteChatResponse) */ {
 public:
  inline RouteChatResponse() : RouteChatResponse(nullptr) {}
  ~RouteChatResponse() override;
  explicit PROTOBUF_CONSTEXPR RouteChatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteChatResponse(const RouteChatResponse& from);
  RouteChatResponse(RouteChatResponse&& from) noexcept
    : RouteChatResponse() {
    *this = ::std::move(from);
  }

  inline RouteChatResponse& operator=(const RouteChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteChatResponse& operator=(RouteChatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteChatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteChatResponse* internal_default_instance() {
    return reinterpret_cast<const RouteChatResponse*>(
               &_RouteChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RouteChatResponse& a, RouteChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteChatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteChatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteChatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteChatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteChatResponse& from) {
    RouteChatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteChatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.RouteChatResponse";
  }
  protected:
  explicit RouteChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteNoteFieldNumber = 1,
  };
  // .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
  bool has_route_note() const;
  private:
  bool _internal_has_route_note() const;
  public:
  void clear_route_note();
  const ::route_guide::v1::RouteNote& route_note() const;
  PROTOBUF_NODISCARD ::route_guide::v1::RouteNote* release_route_note();
  ::route_guide::v1::RouteNote* mutable_route_note();
  void set_allocated_route_note(::route_guide::v1::RouteNote* route_note);
  private:
  const ::route_guide::v1::RouteNote& _internal_route_note() const;
  ::route_guide::v1::RouteNote* _internal_mutable_route_note();
  public:
  void unsafe_arena_set_allocated_route_note(
      ::route_guide::v1::RouteNote* route_note);
  ::route_guide::v1::RouteNote* unsafe_arena_release_route_note();

  // @@protoc_insertion_point(class_scope:route_guide.v1.RouteChatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::route_guide::v1::RouteNote* route_note_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class Feature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.Feature) */ {
 public:
  inline Feature() : Feature(nullptr) {}
  ~Feature() override;
  explicit PROTOBUF_CONSTEXPR Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Feature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Feature& from) {
    Feature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.Feature";
  }
  protected:
  explicit Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .route_guide.v1.Point location = 2 [json_name = "location"];
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::route_guide::v1::Point& location() const;
  PROTOBUF_NODISCARD ::route_guide::v1::Point* release_location();
  ::route_guide::v1::Point* mutable_location();
  void set_allocated_location(::route_guide::v1::Point* location);
  private:
  const ::route_guide::v1::Point& _internal_location() const;
  ::route_guide::v1::Point* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::route_guide::v1::Point* location);
  ::route_guide::v1::Point* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:route_guide.v1.Feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::route_guide::v1::Point* location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class FeatureDatabase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.FeatureDatabase) */ {
 public:
  inline FeatureDatabase() : FeatureDatabase(nullptr) {}
  ~FeatureDatabase() override;
  explicit PROTOBUF_CONSTEXPR FeatureDatabase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureDatabase(const FeatureDatabase& from);
  FeatureDatabase(FeatureDatabase&& from) noexcept
    : FeatureDatabase() {
    *this = ::std::move(from);
  }

  inline FeatureDatabase& operator=(const FeatureDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureDatabase& operator=(FeatureDatabase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeatureDatabase& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureDatabase* internal_default_instance() {
    return reinterpret_cast<const FeatureDatabase*>(
               &_FeatureDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FeatureDatabase& a, FeatureDatabase& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureDatabase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureDatabase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureDatabase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureDatabase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeatureDatabase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeatureDatabase& from) {
    FeatureDatabase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureDatabase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.FeatureDatabase";
  }
  protected:
  explicit FeatureDatabase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
  };
  // repeated .route_guide.v1.Feature feature = 1 [json_name = "feature"];
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::route_guide::v1::Feature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::route_guide::v1::Feature >*
      mutable_feature();
  private:
  const ::route_guide::v1::Feature& _internal_feature(int index) const;
  ::route_guide::v1::Feature* _internal_add_feature();
  public:
  const ::route_guide::v1::Feature& feature(int index) const;
  ::route_guide::v1::Feature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::route_guide::v1::Feature >&
      feature() const;

  // @@protoc_insertion_point(class_scope:route_guide.v1.FeatureDatabase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::route_guide::v1::Feature > feature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class RouteNote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.RouteNote) */ {
 public:
  inline RouteNote() : RouteNote(nullptr) {}
  ~RouteNote() override;
  explicit PROTOBUF_CONSTEXPR RouteNote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteNote(const RouteNote& from);
  RouteNote(RouteNote&& from) noexcept
    : RouteNote() {
    *this = ::std::move(from);
  }

  inline RouteNote& operator=(const RouteNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteNote& operator=(RouteNote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteNote& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteNote* internal_default_instance() {
    return reinterpret_cast<const RouteNote*>(
               &_RouteNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RouteNote& a, RouteNote& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteNote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteNote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteNote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteNote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteNote& from) {
    RouteNote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteNote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.RouteNote";
  }
  protected:
  explicit RouteNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kLocationFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .route_guide.v1.Point location = 1 [json_name = "location"];
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::route_guide::v1::Point& location() const;
  PROTOBUF_NODISCARD ::route_guide::v1::Point* release_location();
  ::route_guide::v1::Point* mutable_location();
  void set_allocated_location(::route_guide::v1::Point* location);
  private:
  const ::route_guide::v1::Point& _internal_location() const;
  ::route_guide::v1::Point* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::route_guide::v1::Point* location);
  ::route_guide::v1::Point* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:route_guide.v1.RouteNote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::route_guide::v1::Point* location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// -------------------------------------------------------------------

class RecordRouteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_guide.v1.RecordRouteResponse) */ {
 public:
  inline RecordRouteResponse() : RecordRouteResponse(nullptr) {}
  ~RecordRouteResponse() override;
  explicit PROTOBUF_CONSTEXPR RecordRouteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordRouteResponse(const RecordRouteResponse& from);
  RecordRouteResponse(RecordRouteResponse&& from) noexcept
    : RecordRouteResponse() {
    *this = ::std::move(from);
  }

  inline RecordRouteResponse& operator=(const RecordRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRouteResponse& operator=(RecordRouteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordRouteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordRouteResponse* internal_default_instance() {
    return reinterpret_cast<const RecordRouteResponse*>(
               &_RecordRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RecordRouteResponse& a, RecordRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRouteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordRouteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordRouteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordRouteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordRouteResponse& from) {
    RecordRouteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRouteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_guide.v1.RecordRouteResponse";
  }
  protected:
  explicit RecordRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCountFieldNumber = 1,
    kFeatureCountFieldNumber = 2,
    kDistanceFieldNumber = 3,
    kElapsedTimeFieldNumber = 4,
  };
  // int32 point_count = 1 [json_name = "pointCount"];
  void clear_point_count();
  int32_t point_count() const;
  void set_point_count(int32_t value);
  private:
  int32_t _internal_point_count() const;
  void _internal_set_point_count(int32_t value);
  public:

  // int32 feature_count = 2 [json_name = "featureCount"];
  void clear_feature_count();
  int32_t feature_count() const;
  void set_feature_count(int32_t value);
  private:
  int32_t _internal_feature_count() const;
  void _internal_set_feature_count(int32_t value);
  public:

  // int32 distance = 3 [json_name = "distance"];
  void clear_distance();
  int32_t distance() const;
  void set_distance(int32_t value);
  private:
  int32_t _internal_distance() const;
  void _internal_set_distance(int32_t value);
  public:

  // int32 elapsed_time = 4 [json_name = "elapsedTime"];
  void clear_elapsed_time();
  int32_t elapsed_time() const;
  void set_elapsed_time(int32_t value);
  private:
  int32_t _internal_elapsed_time() const;
  void _internal_set_elapsed_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:route_guide.v1.RecordRouteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t point_count_;
    int32_t feature_count_;
    int32_t distance_;
    int32_t elapsed_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_5fguide_2fv1_2froute_5fguide_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// int32 latitude = 1 [json_name = "latitude"];
inline void Point::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline int32_t Point::_internal_latitude() const {
  return _impl_.latitude_;
}
inline int32_t Point::latitude() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.Point.latitude)
  return _internal_latitude();
}
inline void Point::_internal_set_latitude(int32_t value) {
  
  _impl_.latitude_ = value;
}
inline void Point::set_latitude(int32_t value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:route_guide.v1.Point.latitude)
}

// int32 longitude = 2 [json_name = "longitude"];
inline void Point::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline int32_t Point::_internal_longitude() const {
  return _impl_.longitude_;
}
inline int32_t Point::longitude() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.Point.longitude)
  return _internal_longitude();
}
inline void Point::_internal_set_longitude(int32_t value) {
  
  _impl_.longitude_ = value;
}
inline void Point::set_longitude(int32_t value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:route_guide.v1.Point.longitude)
}

// -------------------------------------------------------------------

// ListFeaturesRequest

// .route_guide.v1.Point lo = 1 [json_name = "lo"];
inline bool ListFeaturesRequest::_internal_has_lo() const {
  return this != internal_default_instance() && _impl_.lo_ != nullptr;
}
inline bool ListFeaturesRequest::has_lo() const {
  return _internal_has_lo();
}
inline void ListFeaturesRequest::clear_lo() {
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
}
inline const ::route_guide::v1::Point& ListFeaturesRequest::_internal_lo() const {
  const ::route_guide::v1::Point* p = _impl_.lo_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::Point&>(
      ::route_guide::v1::_Point_default_instance_);
}
inline const ::route_guide::v1::Point& ListFeaturesRequest::lo() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.ListFeaturesRequest.lo)
  return _internal_lo();
}
inline void ListFeaturesRequest::unsafe_arena_set_allocated_lo(
    ::route_guide::v1::Point* lo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lo_);
  }
  _impl_.lo_ = lo;
  if (lo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.ListFeaturesRequest.lo)
}
inline ::route_guide::v1::Point* ListFeaturesRequest::release_lo() {
  
  ::route_guide::v1::Point* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::Point* ListFeaturesRequest::unsafe_arena_release_lo() {
  // @@protoc_insertion_point(field_release:route_guide.v1.ListFeaturesRequest.lo)
  
  ::route_guide::v1::Point* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
  return temp;
}
inline ::route_guide::v1::Point* ListFeaturesRequest::_internal_mutable_lo() {
  
  if (_impl_.lo_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::Point>(GetArenaForAllocation());
    _impl_.lo_ = p;
  }
  return _impl_.lo_;
}
inline ::route_guide::v1::Point* ListFeaturesRequest::mutable_lo() {
  ::route_guide::v1::Point* _msg = _internal_mutable_lo();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.ListFeaturesRequest.lo)
  return _msg;
}
inline void ListFeaturesRequest::set_allocated_lo(::route_guide::v1::Point* lo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lo_;
  }
  if (lo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lo);
    if (message_arena != submessage_arena) {
      lo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lo_ = lo;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.ListFeaturesRequest.lo)
}

// .route_guide.v1.Point hi = 2 [json_name = "hi"];
inline bool ListFeaturesRequest::_internal_has_hi() const {
  return this != internal_default_instance() && _impl_.hi_ != nullptr;
}
inline bool ListFeaturesRequest::has_hi() const {
  return _internal_has_hi();
}
inline void ListFeaturesRequest::clear_hi() {
  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
}
inline const ::route_guide::v1::Point& ListFeaturesRequest::_internal_hi() const {
  const ::route_guide::v1::Point* p = _impl_.hi_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::Point&>(
      ::route_guide::v1::_Point_default_instance_);
}
inline const ::route_guide::v1::Point& ListFeaturesRequest::hi() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.ListFeaturesRequest.hi)
  return _internal_hi();
}
inline void ListFeaturesRequest::unsafe_arena_set_allocated_hi(
    ::route_guide::v1::Point* hi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hi_);
  }
  _impl_.hi_ = hi;
  if (hi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.ListFeaturesRequest.hi)
}
inline ::route_guide::v1::Point* ListFeaturesRequest::release_hi() {
  
  ::route_guide::v1::Point* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::Point* ListFeaturesRequest::unsafe_arena_release_hi() {
  // @@protoc_insertion_point(field_release:route_guide.v1.ListFeaturesRequest.hi)
  
  ::route_guide::v1::Point* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
  return temp;
}
inline ::route_guide::v1::Point* ListFeaturesRequest::_internal_mutable_hi() {
  
  if (_impl_.hi_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::Point>(GetArenaForAllocation());
    _impl_.hi_ = p;
  }
  return _impl_.hi_;
}
inline ::route_guide::v1::Point* ListFeaturesRequest::mutable_hi() {
  ::route_guide::v1::Point* _msg = _internal_mutable_hi();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.ListFeaturesRequest.hi)
  return _msg;
}
inline void ListFeaturesRequest::set_allocated_hi(::route_guide::v1::Point* hi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hi_;
  }
  if (hi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hi);
    if (message_arena != submessage_arena) {
      hi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hi_ = hi;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.ListFeaturesRequest.hi)
}

// -------------------------------------------------------------------

// GetFeatureResponse

// .route_guide.v1.Feature feature = 1 [json_name = "feature"];
inline bool GetFeatureResponse::_internal_has_feature() const {
  return this != internal_default_instance() && _impl_.feature_ != nullptr;
}
inline bool GetFeatureResponse::has_feature() const {
  return _internal_has_feature();
}
inline void GetFeatureResponse::clear_feature() {
  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
}
inline const ::route_guide::v1::Feature& GetFeatureResponse::_internal_feature() const {
  const ::route_guide::v1::Feature* p = _impl_.feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::Feature&>(
      ::route_guide::v1::_Feature_default_instance_);
}
inline const ::route_guide::v1::Feature& GetFeatureResponse::feature() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.GetFeatureResponse.feature)
  return _internal_feature();
}
inline void GetFeatureResponse::unsafe_arena_set_allocated_feature(
    ::route_guide::v1::Feature* feature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feature_);
  }
  _impl_.feature_ = feature;
  if (feature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.GetFeatureResponse.feature)
}
inline ::route_guide::v1::Feature* GetFeatureResponse::release_feature() {
  
  ::route_guide::v1::Feature* temp = _impl_.feature_;
  _impl_.feature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::Feature* GetFeatureResponse::unsafe_arena_release_feature() {
  // @@protoc_insertion_point(field_release:route_guide.v1.GetFeatureResponse.feature)
  
  ::route_guide::v1::Feature* temp = _impl_.feature_;
  _impl_.feature_ = nullptr;
  return temp;
}
inline ::route_guide::v1::Feature* GetFeatureResponse::_internal_mutable_feature() {
  
  if (_impl_.feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::Feature>(GetArenaForAllocation());
    _impl_.feature_ = p;
  }
  return _impl_.feature_;
}
inline ::route_guide::v1::Feature* GetFeatureResponse::mutable_feature() {
  ::route_guide::v1::Feature* _msg = _internal_mutable_feature();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.GetFeatureResponse.feature)
  return _msg;
}
inline void GetFeatureResponse::set_allocated_feature(::route_guide::v1::Feature* feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.feature_;
  }
  if (feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(feature);
    if (message_arena != submessage_arena) {
      feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.feature_ = feature;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.GetFeatureResponse.feature)
}

// -------------------------------------------------------------------

// GetFeatureRequest

// .route_guide.v1.Point point = 1 [json_name = "point"];
inline bool GetFeatureRequest::_internal_has_point() const {
  return this != internal_default_instance() && _impl_.point_ != nullptr;
}
inline bool GetFeatureRequest::has_point() const {
  return _internal_has_point();
}
inline void GetFeatureRequest::clear_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
}
inline const ::route_guide::v1::Point& GetFeatureRequest::_internal_point() const {
  const ::route_guide::v1::Point* p = _impl_.point_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::Point&>(
      ::route_guide::v1::_Point_default_instance_);
}
inline const ::route_guide::v1::Point& GetFeatureRequest::point() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.GetFeatureRequest.point)
  return _internal_point();
}
inline void GetFeatureRequest::unsafe_arena_set_allocated_point(
    ::route_guide::v1::Point* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_);
  }
  _impl_.point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.GetFeatureRequest.point)
}
inline ::route_guide::v1::Point* GetFeatureRequest::release_point() {
  
  ::route_guide::v1::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::Point* GetFeatureRequest::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:route_guide.v1.GetFeatureRequest.point)
  
  ::route_guide::v1::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
  return temp;
}
inline ::route_guide::v1::Point* GetFeatureRequest::_internal_mutable_point() {
  
  if (_impl_.point_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::Point>(GetArenaForAllocation());
    _impl_.point_ = p;
  }
  return _impl_.point_;
}
inline ::route_guide::v1::Point* GetFeatureRequest::mutable_point() {
  ::route_guide::v1::Point* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.GetFeatureRequest.point)
  return _msg;
}
inline void GetFeatureRequest::set_allocated_point(::route_guide::v1::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.point_ = point;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.GetFeatureRequest.point)
}

// -------------------------------------------------------------------

// ListFeaturesResponse

// .route_guide.v1.Feature feature = 1 [json_name = "feature"];
inline bool ListFeaturesResponse::_internal_has_feature() const {
  return this != internal_default_instance() && _impl_.feature_ != nullptr;
}
inline bool ListFeaturesResponse::has_feature() const {
  return _internal_has_feature();
}
inline void ListFeaturesResponse::clear_feature() {
  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
}
inline const ::route_guide::v1::Feature& ListFeaturesResponse::_internal_feature() const {
  const ::route_guide::v1::Feature* p = _impl_.feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::Feature&>(
      ::route_guide::v1::_Feature_default_instance_);
}
inline const ::route_guide::v1::Feature& ListFeaturesResponse::feature() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.ListFeaturesResponse.feature)
  return _internal_feature();
}
inline void ListFeaturesResponse::unsafe_arena_set_allocated_feature(
    ::route_guide::v1::Feature* feature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feature_);
  }
  _impl_.feature_ = feature;
  if (feature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.ListFeaturesResponse.feature)
}
inline ::route_guide::v1::Feature* ListFeaturesResponse::release_feature() {
  
  ::route_guide::v1::Feature* temp = _impl_.feature_;
  _impl_.feature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::Feature* ListFeaturesResponse::unsafe_arena_release_feature() {
  // @@protoc_insertion_point(field_release:route_guide.v1.ListFeaturesResponse.feature)
  
  ::route_guide::v1::Feature* temp = _impl_.feature_;
  _impl_.feature_ = nullptr;
  return temp;
}
inline ::route_guide::v1::Feature* ListFeaturesResponse::_internal_mutable_feature() {
  
  if (_impl_.feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::Feature>(GetArenaForAllocation());
    _impl_.feature_ = p;
  }
  return _impl_.feature_;
}
inline ::route_guide::v1::Feature* ListFeaturesResponse::mutable_feature() {
  ::route_guide::v1::Feature* _msg = _internal_mutable_feature();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.ListFeaturesResponse.feature)
  return _msg;
}
inline void ListFeaturesResponse::set_allocated_feature(::route_guide::v1::Feature* feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.feature_;
  }
  if (feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(feature);
    if (message_arena != submessage_arena) {
      feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.feature_ = feature;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.ListFeaturesResponse.feature)
}

// -------------------------------------------------------------------

// RecordRouteRequest

// .route_guide.v1.Point point = 1 [json_name = "point"];
inline bool RecordRouteRequest::_internal_has_point() const {
  return this != internal_default_instance() && _impl_.point_ != nullptr;
}
inline bool RecordRouteRequest::has_point() const {
  return _internal_has_point();
}
inline void RecordRouteRequest::clear_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
}
inline const ::route_guide::v1::Point& RecordRouteRequest::_internal_point() const {
  const ::route_guide::v1::Point* p = _impl_.point_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::Point&>(
      ::route_guide::v1::_Point_default_instance_);
}
inline const ::route_guide::v1::Point& RecordRouteRequest::point() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.RecordRouteRequest.point)
  return _internal_point();
}
inline void RecordRouteRequest::unsafe_arena_set_allocated_point(
    ::route_guide::v1::Point* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_);
  }
  _impl_.point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.RecordRouteRequest.point)
}
inline ::route_guide::v1::Point* RecordRouteRequest::release_point() {
  
  ::route_guide::v1::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::Point* RecordRouteRequest::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:route_guide.v1.RecordRouteRequest.point)
  
  ::route_guide::v1::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
  return temp;
}
inline ::route_guide::v1::Point* RecordRouteRequest::_internal_mutable_point() {
  
  if (_impl_.point_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::Point>(GetArenaForAllocation());
    _impl_.point_ = p;
  }
  return _impl_.point_;
}
inline ::route_guide::v1::Point* RecordRouteRequest::mutable_point() {
  ::route_guide::v1::Point* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.RecordRouteRequest.point)
  return _msg;
}
inline void RecordRouteRequest::set_allocated_point(::route_guide::v1::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.point_ = point;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.RecordRouteRequest.point)
}

// -------------------------------------------------------------------

// RouteChatRequest

// .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
inline bool RouteChatRequest::_internal_has_route_note() const {
  return this != internal_default_instance() && _impl_.route_note_ != nullptr;
}
inline bool RouteChatRequest::has_route_note() const {
  return _internal_has_route_note();
}
inline void RouteChatRequest::clear_route_note() {
  if (GetArenaForAllocation() == nullptr && _impl_.route_note_ != nullptr) {
    delete _impl_.route_note_;
  }
  _impl_.route_note_ = nullptr;
}
inline const ::route_guide::v1::RouteNote& RouteChatRequest::_internal_route_note() const {
  const ::route_guide::v1::RouteNote* p = _impl_.route_note_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::RouteNote&>(
      ::route_guide::v1::_RouteNote_default_instance_);
}
inline const ::route_guide::v1::RouteNote& RouteChatRequest::route_note() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.RouteChatRequest.route_note)
  return _internal_route_note();
}
inline void RouteChatRequest::unsafe_arena_set_allocated_route_note(
    ::route_guide::v1::RouteNote* route_note) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.route_note_);
  }
  _impl_.route_note_ = route_note;
  if (route_note) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.RouteChatRequest.route_note)
}
inline ::route_guide::v1::RouteNote* RouteChatRequest::release_route_note() {
  
  ::route_guide::v1::RouteNote* temp = _impl_.route_note_;
  _impl_.route_note_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::RouteNote* RouteChatRequest::unsafe_arena_release_route_note() {
  // @@protoc_insertion_point(field_release:route_guide.v1.RouteChatRequest.route_note)
  
  ::route_guide::v1::RouteNote* temp = _impl_.route_note_;
  _impl_.route_note_ = nullptr;
  return temp;
}
inline ::route_guide::v1::RouteNote* RouteChatRequest::_internal_mutable_route_note() {
  
  if (_impl_.route_note_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::RouteNote>(GetArenaForAllocation());
    _impl_.route_note_ = p;
  }
  return _impl_.route_note_;
}
inline ::route_guide::v1::RouteNote* RouteChatRequest::mutable_route_note() {
  ::route_guide::v1::RouteNote* _msg = _internal_mutable_route_note();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.RouteChatRequest.route_note)
  return _msg;
}
inline void RouteChatRequest::set_allocated_route_note(::route_guide::v1::RouteNote* route_note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.route_note_;
  }
  if (route_note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(route_note);
    if (message_arena != submessage_arena) {
      route_note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_note, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.route_note_ = route_note;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.RouteChatRequest.route_note)
}

// -------------------------------------------------------------------

// RouteChatResponse

// .route_guide.v1.RouteNote route_note = 1 [json_name = "routeNote"];
inline bool RouteChatResponse::_internal_has_route_note() const {
  return this != internal_default_instance() && _impl_.route_note_ != nullptr;
}
inline bool RouteChatResponse::has_route_note() const {
  return _internal_has_route_note();
}
inline void RouteChatResponse::clear_route_note() {
  if (GetArenaForAllocation() == nullptr && _impl_.route_note_ != nullptr) {
    delete _impl_.route_note_;
  }
  _impl_.route_note_ = nullptr;
}
inline const ::route_guide::v1::RouteNote& RouteChatResponse::_internal_route_note() const {
  const ::route_guide::v1::RouteNote* p = _impl_.route_note_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::RouteNote&>(
      ::route_guide::v1::_RouteNote_default_instance_);
}
inline const ::route_guide::v1::RouteNote& RouteChatResponse::route_note() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.RouteChatResponse.route_note)
  return _internal_route_note();
}
inline void RouteChatResponse::unsafe_arena_set_allocated_route_note(
    ::route_guide::v1::RouteNote* route_note) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.route_note_);
  }
  _impl_.route_note_ = route_note;
  if (route_note) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.RouteChatResponse.route_note)
}
inline ::route_guide::v1::RouteNote* RouteChatResponse::release_route_note() {
  
  ::route_guide::v1::RouteNote* temp = _impl_.route_note_;
  _impl_.route_note_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::RouteNote* RouteChatResponse::unsafe_arena_release_route_note() {
  // @@protoc_insertion_point(field_release:route_guide.v1.RouteChatResponse.route_note)
  
  ::route_guide::v1::RouteNote* temp = _impl_.route_note_;
  _impl_.route_note_ = nullptr;
  return temp;
}
inline ::route_guide::v1::RouteNote* RouteChatResponse::_internal_mutable_route_note() {
  
  if (_impl_.route_note_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::RouteNote>(GetArenaForAllocation());
    _impl_.route_note_ = p;
  }
  return _impl_.route_note_;
}
inline ::route_guide::v1::RouteNote* RouteChatResponse::mutable_route_note() {
  ::route_guide::v1::RouteNote* _msg = _internal_mutable_route_note();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.RouteChatResponse.route_note)
  return _msg;
}
inline void RouteChatResponse::set_allocated_route_note(::route_guide::v1::RouteNote* route_note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.route_note_;
  }
  if (route_note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(route_note);
    if (message_arena != submessage_arena) {
      route_note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_note, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.route_note_ = route_note;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.RouteChatResponse.route_note)
}

// -------------------------------------------------------------------

// Feature

// string name = 1 [json_name = "name"];
inline void Feature::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.Feature.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Feature::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:route_guide.v1.Feature.name)
}
inline std::string* Feature::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.Feature.name)
  return _s;
}
inline const std::string& Feature::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Feature::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Feature::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:route_guide.v1.Feature.name)
  return _impl_.name_.Release();
}
inline void Feature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.Feature.name)
}

// .route_guide.v1.Point location = 2 [json_name = "location"];
inline bool Feature::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool Feature::has_location() const {
  return _internal_has_location();
}
inline void Feature::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::route_guide::v1::Point& Feature::_internal_location() const {
  const ::route_guide::v1::Point* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::Point&>(
      ::route_guide::v1::_Point_default_instance_);
}
inline const ::route_guide::v1::Point& Feature::location() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.Feature.location)
  return _internal_location();
}
inline void Feature::unsafe_arena_set_allocated_location(
    ::route_guide::v1::Point* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.Feature.location)
}
inline ::route_guide::v1::Point* Feature::release_location() {
  
  ::route_guide::v1::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::Point* Feature::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:route_guide.v1.Feature.location)
  
  ::route_guide::v1::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::route_guide::v1::Point* Feature::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::Point>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::route_guide::v1::Point* Feature::mutable_location() {
  ::route_guide::v1::Point* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.Feature.location)
  return _msg;
}
inline void Feature::set_allocated_location(::route_guide::v1::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.Feature.location)
}

// -------------------------------------------------------------------

// FeatureDatabase

// repeated .route_guide.v1.Feature feature = 1 [json_name = "feature"];
inline int FeatureDatabase::_internal_feature_size() const {
  return _impl_.feature_.size();
}
inline int FeatureDatabase::feature_size() const {
  return _internal_feature_size();
}
inline void FeatureDatabase::clear_feature() {
  _impl_.feature_.Clear();
}
inline ::route_guide::v1::Feature* FeatureDatabase::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:route_guide.v1.FeatureDatabase.feature)
  return _impl_.feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::route_guide::v1::Feature >*
FeatureDatabase::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:route_guide.v1.FeatureDatabase.feature)
  return &_impl_.feature_;
}
inline const ::route_guide::v1::Feature& FeatureDatabase::_internal_feature(int index) const {
  return _impl_.feature_.Get(index);
}
inline const ::route_guide::v1::Feature& FeatureDatabase::feature(int index) const {
  // @@protoc_insertion_point(field_get:route_guide.v1.FeatureDatabase.feature)
  return _internal_feature(index);
}
inline ::route_guide::v1::Feature* FeatureDatabase::_internal_add_feature() {
  return _impl_.feature_.Add();
}
inline ::route_guide::v1::Feature* FeatureDatabase::add_feature() {
  ::route_guide::v1::Feature* _add = _internal_add_feature();
  // @@protoc_insertion_point(field_add:route_guide.v1.FeatureDatabase.feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::route_guide::v1::Feature >&
FeatureDatabase::feature() const {
  // @@protoc_insertion_point(field_list:route_guide.v1.FeatureDatabase.feature)
  return _impl_.feature_;
}

// -------------------------------------------------------------------

// RouteNote

// .route_guide.v1.Point location = 1 [json_name = "location"];
inline bool RouteNote::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool RouteNote::has_location() const {
  return _internal_has_location();
}
inline void RouteNote::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::route_guide::v1::Point& RouteNote::_internal_location() const {
  const ::route_guide::v1::Point* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::route_guide::v1::Point&>(
      ::route_guide::v1::_Point_default_instance_);
}
inline const ::route_guide::v1::Point& RouteNote::location() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.RouteNote.location)
  return _internal_location();
}
inline void RouteNote::unsafe_arena_set_allocated_location(
    ::route_guide::v1::Point* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:route_guide.v1.RouteNote.location)
}
inline ::route_guide::v1::Point* RouteNote::release_location() {
  
  ::route_guide::v1::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::route_guide::v1::Point* RouteNote::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:route_guide.v1.RouteNote.location)
  
  ::route_guide::v1::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::route_guide::v1::Point* RouteNote::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::route_guide::v1::Point>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::route_guide::v1::Point* RouteNote::mutable_location() {
  ::route_guide::v1::Point* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.RouteNote.location)
  return _msg;
}
inline void RouteNote::set_allocated_location(::route_guide::v1::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.RouteNote.location)
}

// string message = 2 [json_name = "message"];
inline void RouteNote::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RouteNote::message() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.RouteNote.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteNote::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:route_guide.v1.RouteNote.message)
}
inline std::string* RouteNote::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:route_guide.v1.RouteNote.message)
  return _s;
}
inline const std::string& RouteNote::_internal_message() const {
  return _impl_.message_.Get();
}
inline void RouteNote::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteNote::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteNote::release_message() {
  // @@protoc_insertion_point(field_release:route_guide.v1.RouteNote.message)
  return _impl_.message_.Release();
}
inline void RouteNote::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:route_guide.v1.RouteNote.message)
}

// -------------------------------------------------------------------

// RecordRouteResponse

// int32 point_count = 1 [json_name = "pointCount"];
inline void RecordRouteResponse::clear_point_count() {
  _impl_.point_count_ = 0;
}
inline int32_t RecordRouteResponse::_internal_point_count() const {
  return _impl_.point_count_;
}
inline int32_t RecordRouteResponse::point_count() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.RecordRouteResponse.point_count)
  return _internal_point_count();
}
inline void RecordRouteResponse::_internal_set_point_count(int32_t value) {
  
  _impl_.point_count_ = value;
}
inline void RecordRouteResponse::set_point_count(int32_t value) {
  _internal_set_point_count(value);
  // @@protoc_insertion_point(field_set:route_guide.v1.RecordRouteResponse.point_count)
}

// int32 feature_count = 2 [json_name = "featureCount"];
inline void RecordRouteResponse::clear_feature_count() {
  _impl_.feature_count_ = 0;
}
inline int32_t RecordRouteResponse::_internal_feature_count() const {
  return _impl_.feature_count_;
}
inline int32_t RecordRouteResponse::feature_count() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.RecordRouteResponse.feature_count)
  return _internal_feature_count();
}
inline void RecordRouteResponse::_internal_set_feature_count(int32_t value) {
  
  _impl_.feature_count_ = value;
}
inline void RecordRouteResponse::set_feature_count(int32_t value) {
  _internal_set_feature_count(value);
  // @@protoc_insertion_point(field_set:route_guide.v1.RecordRouteResponse.feature_count)
}

// int32 distance = 3 [json_name = "distance"];
inline void RecordRouteResponse::clear_distance() {
  _impl_.distance_ = 0;
}
inline int32_t RecordRouteResponse::_internal_distance() const {
  return _impl_.distance_;
}
inline int32_t RecordRouteResponse::distance() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.RecordRouteResponse.distance)
  return _internal_distance();
}
inline void RecordRouteResponse::_internal_set_distance(int32_t value) {
  
  _impl_.distance_ = value;
}
inline void RecordRouteResponse::set_distance(int32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:route_guide.v1.RecordRouteResponse.distance)
}

// int32 elapsed_time = 4 [json_name = "elapsedTime"];
inline void RecordRouteResponse::clear_elapsed_time() {
  _impl_.elapsed_time_ = 0;
}
inline int32_t RecordRouteResponse::_internal_elapsed_time() const {
  return _impl_.elapsed_time_;
}
inline int32_t RecordRouteResponse::elapsed_time() const {
  // @@protoc_insertion_point(field_get:route_guide.v1.RecordRouteResponse.elapsed_time)
  return _internal_elapsed_time();
}
inline void RecordRouteResponse::_internal_set_elapsed_time(int32_t value) {
  
  _impl_.elapsed_time_ = value;
}
inline void RecordRouteResponse::set_elapsed_time(int32_t value) {
  _internal_set_elapsed_time(value);
  // @@protoc_insertion_point(field_set:route_guide.v1.RecordRouteResponse.elapsed_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace route_guide

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_route_5fguide_2fv1_2froute_5fguide_2eproto
